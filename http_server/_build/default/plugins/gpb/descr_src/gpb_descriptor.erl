%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(gpb_descriptor).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_FieldDescriptorProto.Type'/1, 'enum_value_by_symbol_FieldDescriptorProto.Type'/1]).
-export(['enum_symbol_by_value_FieldDescriptorProto.Label'/1, 'enum_value_by_symbol_FieldDescriptorProto.Label'/1]).
-export(['enum_symbol_by_value_FileOptions.OptimizeMode'/1, 'enum_value_by_symbol_FileOptions.OptimizeMode'/1]).
-export(['enum_symbol_by_value_FieldOptions.CType'/1, 'enum_value_by_symbol_FieldOptions.CType'/1]).
-export(['enum_symbol_by_value_FieldOptions.JSType'/1, 'enum_value_by_symbol_FieldOptions.JSType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gpb_descriptor.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'OneofDescriptorProto'{} ->
	  e_msg_OneofDescriptorProto(Msg, TrUserData);
      #'UninterpretedOption.NamePart'{} ->
	  'e_msg_UninterpretedOption.NamePart'(Msg, TrUserData);
      #'UninterpretedOption'{} ->
	  e_msg_UninterpretedOption(Msg, TrUserData);
      #'DescriptorProto.ReservedRange'{} ->
	  'e_msg_DescriptorProto.ReservedRange'(Msg, TrUserData);
      #'DescriptorProto.ExtensionRange'{} ->
	  'e_msg_DescriptorProto.ExtensionRange'(Msg, TrUserData);
      #'FileOptions'{} -> e_msg_FileOptions(Msg, TrUserData);
      #'MethodOptions'{} ->
	  e_msg_MethodOptions(Msg, TrUserData);
      #'EnumOptions'{} -> e_msg_EnumOptions(Msg, TrUserData);
      #'EnumValueOptions'{} ->
	  e_msg_EnumValueOptions(Msg, TrUserData);
      #'GeneratedCodeInfo.Annotation'{} ->
	  'e_msg_GeneratedCodeInfo.Annotation'(Msg, TrUserData);
      #'GeneratedCodeInfo'{} ->
	  e_msg_GeneratedCodeInfo(Msg, TrUserData);
      #'ServiceOptions'{} ->
	  e_msg_ServiceOptions(Msg, TrUserData);
      #'MethodDescriptorProto'{} ->
	  e_msg_MethodDescriptorProto(Msg, TrUserData);
      #'ServiceDescriptorProto'{} ->
	  e_msg_ServiceDescriptorProto(Msg, TrUserData);
      #'MessageOptions'{} ->
	  e_msg_MessageOptions(Msg, TrUserData);
      #'EnumValueDescriptorProto'{} ->
	  e_msg_EnumValueDescriptorProto(Msg, TrUserData);
      #'EnumDescriptorProto'{} ->
	  e_msg_EnumDescriptorProto(Msg, TrUserData);
      #'FieldOptions'{} ->
	  e_msg_FieldOptions(Msg, TrUserData);
      #'FieldDescriptorProto'{} ->
	  e_msg_FieldDescriptorProto(Msg, TrUserData);
      #'DescriptorProto'{} ->
	  e_msg_DescriptorProto(Msg, TrUserData);
      #'SourceCodeInfo.Location'{} ->
	  'e_msg_SourceCodeInfo.Location'(Msg, TrUserData);
      #'SourceCodeInfo'{} ->
	  e_msg_SourceCodeInfo(Msg, TrUserData);
      #'FileDescriptorProto'{} ->
	  e_msg_FileDescriptorProto(Msg, TrUserData);
      #'FileDescriptorSet'{} ->
	  e_msg_FileDescriptorSet(Msg, TrUserData)
    end.



e_msg_OneofDescriptorProto(Msg, TrUserData) ->
    e_msg_OneofDescriptorProto(Msg, <<>>, TrUserData).


e_msg_OneofDescriptorProto(#'OneofDescriptorProto'{name
						       = F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

'e_msg_UninterpretedOption.NamePart'(Msg, TrUserData) ->
    'e_msg_UninterpretedOption.NamePart'(Msg, <<>>,
					 TrUserData).


'e_msg_UninterpretedOption.NamePart'(#'UninterpretedOption.NamePart'{name_part
									 = F1,
								     is_extension
									 = F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bool(TrF2, <<B1/binary, 16>>)
    end.

e_msg_UninterpretedOption(Msg, TrUserData) ->
    e_msg_UninterpretedOption(Msg, <<>>, TrUserData).


e_msg_UninterpretedOption(#'UninterpretedOption'{name =
						     F1,
						 identifier_value = F2,
						 positive_int_value = F3,
						 negative_int_value = F4,
						 double_value = F5,
						 string_value = F6,
						 aggregate_value = F7},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_UninterpretedOption_name(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 26>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 32>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int64(TrF4, <<B3/binary, 40>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_double(TrF5, <<B4/binary, 49>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bytes(TrF6, <<B5/binary, 58>>)
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     e_type_string(TrF7, <<B6/binary, 66>>)
	   end
    end.

'e_msg_DescriptorProto.ReservedRange'(Msg,
				      TrUserData) ->
    'e_msg_DescriptorProto.ReservedRange'(Msg, <<>>,
					  TrUserData).


'e_msg_DescriptorProto.ReservedRange'(#'DescriptorProto.ReservedRange'{start
									   = F1,
								       'end' =
									   F2},
				      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>)
	   end
    end.

'e_msg_DescriptorProto.ExtensionRange'(Msg,
				       TrUserData) ->
    'e_msg_DescriptorProto.ExtensionRange'(Msg, <<>>,
					   TrUserData).


'e_msg_DescriptorProto.ExtensionRange'(#'DescriptorProto.ExtensionRange'{start
									     =
									     F1,
									 'end' =
									     F2},
				       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_FileOptions(Msg, TrUserData) ->
    e_msg_FileOptions(Msg, <<>>, TrUserData).


e_msg_FileOptions(#'FileOptions'{java_package = F1,
				 java_outer_classname = F2,
				 java_multiple_files = F3,
				 java_generate_equals_and_hash = F4,
				 java_string_check_utf8 = F5, optimize_for = F6,
				 go_package = F7, cc_generic_services = F8,
				 java_generic_services = F9,
				 py_generic_services = F10, deprecated = F11,
				 cc_enable_arenas = F12,
				 objc_class_prefix = F13,
				 csharp_namespace = F14,
				 javanano_use_deprecated_package = F15,
				 uninterpreted_option = F16},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 66>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bool(TrF3, <<B2/binary, 80>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bool(TrF4, <<B3/binary, 160, 1>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 216, 1>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  'e_enum_FileOptions.OptimizeMode'(TrF6,
						    <<B5/binary, 72>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_string(TrF7, <<B6/binary, 90>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_bool(TrF8, <<B7/binary, 128, 1>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 136, 1>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_bool(TrF10, <<B9/binary, 144, 1>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_bool(TrF11, <<B10/binary, 184, 1>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_type_bool(TrF12, <<B11/binary, 248, 1>>)
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   e_type_string(TrF13, <<B12/binary, 162, 2>>)
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   e_type_string(TrF14, <<B13/binary, 170, 2>>)
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   e_type_bool(TrF15, <<B14/binary, 176, 2>>)
		 end
	  end,
    begin
      TrF16 = id(F16, TrUserData),
      if TrF16 == [] -> B15;
	 true ->
	     e_field_FileOptions_uninterpreted_option(TrF16, B15,
						      TrUserData)
      end
    end.

e_msg_MethodOptions(Msg, TrUserData) ->
    e_msg_MethodOptions(Msg, <<>>, TrUserData).


e_msg_MethodOptions(#'MethodOptions'{deprecated = F1,
				     uninterpreted_option = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 136, 2>>)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_MethodOptions_uninterpreted_option(TrF2, B1,
							TrUserData)
      end
    end.

e_msg_EnumOptions(Msg, TrUserData) ->
    e_msg_EnumOptions(Msg, <<>>, TrUserData).


e_msg_EnumOptions(#'EnumOptions'{allow_alias = F1,
				 deprecated = F2, uninterpreted_option = F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 16>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 24>>)
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_EnumOptions_uninterpreted_option(TrF3, B2,
						      TrUserData)
      end
    end.

e_msg_EnumValueOptions(Msg, TrUserData) ->
    e_msg_EnumValueOptions(Msg, <<>>, TrUserData).


e_msg_EnumValueOptions(#'EnumValueOptions'{deprecated =
					       F1,
					   uninterpreted_option = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_EnumValueOptions_uninterpreted_option(TrF2, B1,
							   TrUserData)
      end
    end.

'e_msg_GeneratedCodeInfo.Annotation'(Msg, TrUserData) ->
    'e_msg_GeneratedCodeInfo.Annotation'(Msg, <<>>,
					 TrUserData).


'e_msg_GeneratedCodeInfo.Annotation'(#'GeneratedCodeInfo.Annotation'{path
									 = F1,
								     source_file
									 = F2,
								     'begin' =
									 F3,
								     'end' =
									 F4},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_GeneratedCodeInfo.Annotation_path'(TrF1, Bin,
							      TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_int32(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_GeneratedCodeInfo(Msg, TrUserData) ->
    e_msg_GeneratedCodeInfo(Msg, <<>>, TrUserData).


e_msg_GeneratedCodeInfo(#'GeneratedCodeInfo'{annotation
						 = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GeneratedCodeInfo_annotation(TrF1, Bin,
						  TrUserData)
      end
    end.

e_msg_ServiceOptions(Msg, TrUserData) ->
    e_msg_ServiceOptions(Msg, <<>>, TrUserData).


e_msg_ServiceOptions(#'ServiceOptions'{deprecated = F1,
				       uninterpreted_option = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 136, 2>>)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_ServiceOptions_uninterpreted_option(TrF2, B1,
							 TrUserData)
      end
    end.

e_msg_MethodDescriptorProto(Msg, TrUserData) ->
    e_msg_MethodDescriptorProto(Msg, <<>>, TrUserData).


e_msg_MethodDescriptorProto(#'MethodDescriptorProto'{name
							 = F1,
						     input_type = F2,
						     output_type = F3,
						     options = F4,
						     client_streaming = F5,
						     server_streaming = F6},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_MethodDescriptorProto_options(TrF4,
							 <<B3/binary, 34>>,
							 TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 40>>)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_type_bool(TrF6, <<B5/binary, 48>>)
	   end
    end.

e_msg_ServiceDescriptorProto(Msg, TrUserData) ->
    e_msg_ServiceDescriptorProto(Msg, <<>>, TrUserData).


e_msg_ServiceDescriptorProto(#'ServiceDescriptorProto'{name
							   = F1,
						       method = F2,
						       options = F3},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_ServiceDescriptorProto_method(TrF2, B1,
							TrUserData)
	   end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_ServiceDescriptorProto_options(TrF3,
						     <<B2/binary, 26>>,
						     TrUserData)
	   end
    end.

e_msg_MessageOptions(Msg, TrUserData) ->
    e_msg_MessageOptions(Msg, <<>>, TrUserData).


e_msg_MessageOptions(#'MessageOptions'{message_set_wire_format
					   = F1,
				       no_standard_descriptor_accessor = F2,
				       deprecated = F3, map_entry = F4,
				       uninterpreted_option = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bool(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bool(TrF4, <<B3/binary, 56>>)
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_MessageOptions_uninterpreted_option(TrF5, B4,
							 TrUserData)
      end
    end.

e_msg_EnumValueDescriptorProto(Msg, TrUserData) ->
    e_msg_EnumValueDescriptorProto(Msg, <<>>, TrUserData).


e_msg_EnumValueDescriptorProto(#'EnumValueDescriptorProto'{name
							       = F1,
							   number = F2,
							   options = F3},
			       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_EnumValueDescriptorProto_options(TrF3,
						       <<B2/binary, 26>>,
						       TrUserData)
	   end
    end.

e_msg_EnumDescriptorProto(Msg, TrUserData) ->
    e_msg_EnumDescriptorProto(Msg, <<>>, TrUserData).


e_msg_EnumDescriptorProto(#'EnumDescriptorProto'{name =
						     F1,
						 value = F2, options = F3},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_EnumDescriptorProto_value(TrF2, B1, TrUserData)
	   end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_EnumDescriptorProto_options(TrF3,
						  <<B2/binary, 26>>, TrUserData)
	   end
    end.

e_msg_FieldOptions(Msg, TrUserData) ->
    e_msg_FieldOptions(Msg, <<>>, TrUserData).


e_msg_FieldOptions(#'FieldOptions'{ctype = F1,
				   packed = F2, jstype = F3, lazy = F4,
				   deprecated = F5, weak = F6,
				   uninterpreted_option = F7},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  'e_enum_FieldOptions.CType'(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  'e_enum_FieldOptions.JSType'(TrF3, <<B2/binary, 48>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bool(TrF4, <<B3/binary, 40>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_bool(TrF5, <<B4/binary, 24>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bool(TrF6, <<B5/binary, 80>>)
		end
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      if TrF7 == [] -> B6;
	 true ->
	     e_field_FieldOptions_uninterpreted_option(TrF7, B6,
						       TrUserData)
      end
    end.

e_msg_FieldDescriptorProto(Msg, TrUserData) ->
    e_msg_FieldDescriptorProto(Msg, <<>>, TrUserData).


e_msg_FieldDescriptorProto(#'FieldDescriptorProto'{name
						       = F1,
						   number = F2, label = F3,
						   type = F4, type_name = F5,
						   extendee = F6,
						   default_value = F7,
						   oneof_index = F8,
						   json_name = F9,
						   options = F10},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 24>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  'e_enum_FieldDescriptorProto.Label'(TrF3,
						      <<B2/binary, 32>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  'e_enum_FieldDescriptorProto.Type'(TrF4,
						     <<B3/binary, 40>>)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 50>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_string(TrF6, <<B5/binary, 18>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_string(TrF7, <<B6/binary, 58>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_int32(TrF8, <<B7/binary, 72>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_string(TrF9, <<B8/binary, 82>>)
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     e_mfield_FieldDescriptorProto_options(TrF10,
						   <<B9/binary, 66>>,
						   TrUserData)
	   end
    end.

e_msg_DescriptorProto(Msg, TrUserData) ->
    e_msg_DescriptorProto(Msg, <<>>, TrUserData).


e_msg_DescriptorProto(#'DescriptorProto'{name = F1,
					 field = F2, extension = F3,
					 nested_type = F4, enum_type = F5,
					 extension_range = F6, oneof_decl = F7,
					 options = F8, reserved_range = F9,
					 reserved_name = F10},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_DescriptorProto_field(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_DescriptorProto_extension(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_DescriptorProto_nested_type(TrF4, B3,
						      TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true ->
		  e_field_DescriptorProto_enum_type(TrF5, B4, TrUserData)
	   end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_DescriptorProto_extension_range(TrF6, B5,
							  TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   if TrF7 == [] -> B6;
	      true ->
		  e_field_DescriptorProto_oneof_decl(TrF7, B6, TrUserData)
	   end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_mfield_DescriptorProto_options(TrF8,
						   <<B7/binary, 58>>,
						   TrUserData)
		end
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   if TrF9 == [] -> B8;
	      true ->
		  e_field_DescriptorProto_reserved_range(TrF9, B8,
							 TrUserData)
	   end
	 end,
    begin
      TrF10 = id(F10, TrUserData),
      if TrF10 == [] -> B9;
	 true ->
	     e_field_DescriptorProto_reserved_name(TrF10, B9,
						   TrUserData)
      end
    end.

'e_msg_SourceCodeInfo.Location'(Msg, TrUserData) ->
    'e_msg_SourceCodeInfo.Location'(Msg, <<>>, TrUserData).


'e_msg_SourceCodeInfo.Location'(#'SourceCodeInfo.Location'{path
							       = F1,
							   span = F2,
							   leading_comments =
							       F3,
							   trailing_comments =
							       F4,
							   leading_detached_comments
							       = F5},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_SourceCodeInfo.Location_path'(TrF1, Bin,
							 TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_SourceCodeInfo.Location_span'(TrF2, B1,
							 TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>)
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     'e_field_SourceCodeInfo.Location_leading_detached_comments'(TrF5,
									 B4,
									 TrUserData)
      end
    end.

e_msg_SourceCodeInfo(Msg, TrUserData) ->
    e_msg_SourceCodeInfo(Msg, <<>>, TrUserData).


e_msg_SourceCodeInfo(#'SourceCodeInfo'{location = F1},
		     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_SourceCodeInfo_location(TrF1, Bin, TrUserData)
      end
    end.

e_msg_FileDescriptorProto(Msg, TrUserData) ->
    e_msg_FileDescriptorProto(Msg, <<>>, TrUserData).


e_msg_FileDescriptorProto(#'FileDescriptorProto'{name =
						     F1,
						 package = F2, dependency = F3,
						 public_dependency = F4,
						 weak_dependency = F5,
						 message_type = F6,
						 enum_type = F7, service = F8,
						 extension = F9, options = F10,
						 source_code_info = F11,
						 syntax = F12},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_FileDescriptorProto_dependency(TrF3, B2,
							 TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_FileDescriptorProto_public_dependency(TrF4, B3,
								TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true ->
		  e_field_FileDescriptorProto_weak_dependency(TrF5, B4,
							      TrUserData)
	   end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_FileDescriptorProto_message_type(TrF6, B5,
							   TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   if TrF7 == [] -> B6;
	      true ->
		  e_field_FileDescriptorProto_enum_type(TrF7, B6,
							TrUserData)
	   end
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true ->
		  e_field_FileDescriptorProto_service(TrF8, B7,
						      TrUserData)
	   end
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   if TrF9 == [] -> B8;
	      true ->
		  e_field_FileDescriptorProto_extension(TrF9, B8,
							TrUserData)
	   end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_mfield_FileDescriptorProto_options(TrF10,
							<<B9/binary, 66>>,
							TrUserData)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_mfield_FileDescriptorProto_source_code_info(TrF11,
								 <<B10/binary,
								   74>>,
								 TrUserData)
		 end
	  end,
    if F12 == undefined -> B11;
       true ->
	   begin
	     TrF12 = id(F12, TrUserData),
	     e_type_string(TrF12, <<B11/binary, 98>>)
	   end
    end.

e_msg_FileDescriptorSet(Msg, TrUserData) ->
    e_msg_FileDescriptorSet(Msg, <<>>, TrUserData).


e_msg_FileDescriptorSet(#'FileDescriptorSet'{file = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_FileDescriptorSet_file(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_UninterpretedOption_name(Msg, Bin,
				  TrUserData) ->
    SubBin = 'e_msg_UninterpretedOption.NamePart'(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UninterpretedOption_name([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_UninterpretedOption_name(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_UninterpretedOption_name(Rest, Bin3,
				     TrUserData);
e_field_UninterpretedOption_name([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_FileOptions_uninterpreted_option(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileOptions_uninterpreted_option([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_FileOptions_uninterpreted_option(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_FileOptions_uninterpreted_option(Rest, Bin3,
					     TrUserData);
e_field_FileOptions_uninterpreted_option([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_MethodOptions_uninterpreted_option(Msg, Bin,
					    TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MethodOptions_uninterpreted_option([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_MethodOptions_uninterpreted_option(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_MethodOptions_uninterpreted_option(Rest, Bin3,
					       TrUserData);
e_field_MethodOptions_uninterpreted_option([], Bin,
					   _TrUserData) ->
    Bin.

e_mfield_EnumOptions_uninterpreted_option(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EnumOptions_uninterpreted_option([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_EnumOptions_uninterpreted_option(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_EnumOptions_uninterpreted_option(Rest, Bin3,
					     TrUserData);
e_field_EnumOptions_uninterpreted_option([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_EnumValueOptions_uninterpreted_option(Msg, Bin,
					       TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EnumValueOptions_uninterpreted_option([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_EnumValueOptions_uninterpreted_option(id(Elem,
							  TrUserData),
						       Bin2, TrUserData),
    e_field_EnumValueOptions_uninterpreted_option(Rest,
						  Bin3, TrUserData);
e_field_EnumValueOptions_uninterpreted_option([], Bin,
					      _TrUserData) ->
    Bin.

'e_field_GeneratedCodeInfo.Annotation_path'(Elems, Bin,
					    TrUserData)
    when Elems =/= [] ->
    SubBin =
	'e_pfield_GeneratedCodeInfo.Annotation_path'(Elems,
						     <<>>, TrUserData),
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_GeneratedCodeInfo.Annotation_path'([], Bin,
					    _TrUserData) ->
    Bin.

'e_pfield_GeneratedCodeInfo.Annotation_path'([Value
					      | Rest],
					     Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    'e_pfield_GeneratedCodeInfo.Annotation_path'(Rest, Bin2,
						 TrUserData);
'e_pfield_GeneratedCodeInfo.Annotation_path'([], Bin,
					     _TrUserData) ->
    Bin.

e_mfield_GeneratedCodeInfo_annotation(Msg, Bin,
				      TrUserData) ->
    SubBin = 'e_msg_GeneratedCodeInfo.Annotation'(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GeneratedCodeInfo_annotation([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GeneratedCodeInfo_annotation(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_GeneratedCodeInfo_annotation(Rest, Bin3,
					 TrUserData);
e_field_GeneratedCodeInfo_annotation([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_ServiceOptions_uninterpreted_option(Msg, Bin,
					     TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServiceOptions_uninterpreted_option([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_ServiceOptions_uninterpreted_option(id(Elem,
							TrUserData),
						     Bin2, TrUserData),
    e_field_ServiceOptions_uninterpreted_option(Rest, Bin3,
						TrUserData);
e_field_ServiceOptions_uninterpreted_option([], Bin,
					    _TrUserData) ->
    Bin.

e_mfield_MethodDescriptorProto_options(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_MethodOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServiceDescriptorProto_method(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_MethodDescriptorProto(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServiceDescriptorProto_method([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ServiceDescriptorProto_method(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_ServiceDescriptorProto_method(Rest, Bin3,
					  TrUserData);
e_field_ServiceDescriptorProto_method([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_ServiceDescriptorProto_options(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_ServiceOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MessageOptions_uninterpreted_option(Msg, Bin,
					     TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MessageOptions_uninterpreted_option([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_MessageOptions_uninterpreted_option(id(Elem,
							TrUserData),
						     Bin2, TrUserData),
    e_field_MessageOptions_uninterpreted_option(Rest, Bin3,
						TrUserData);
e_field_MessageOptions_uninterpreted_option([], Bin,
					    _TrUserData) ->
    Bin.

e_mfield_EnumValueDescriptorProto_options(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_EnumValueOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_EnumDescriptorProto_value(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_EnumValueDescriptorProto(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EnumDescriptorProto_value([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_EnumDescriptorProto_value(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_EnumDescriptorProto_value(Rest, Bin3,
				      TrUserData);
e_field_EnumDescriptorProto_value([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_EnumDescriptorProto_options(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_EnumOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FieldOptions_uninterpreted_option(Msg, Bin,
					   TrUserData) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FieldOptions_uninterpreted_option([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_FieldOptions_uninterpreted_option(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_FieldOptions_uninterpreted_option(Rest, Bin3,
					      TrUserData);
e_field_FieldOptions_uninterpreted_option([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_FieldDescriptorProto_options(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_FieldOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DescriptorProto_field(Msg, Bin, TrUserData) ->
    SubBin = e_msg_FieldDescriptorProto(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_field([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_DescriptorProto_field(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_DescriptorProto_field(Rest, Bin3, TrUserData);
e_field_DescriptorProto_field([], Bin, _TrUserData) ->
    Bin.

e_mfield_DescriptorProto_extension(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_FieldDescriptorProto(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_extension([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_DescriptorProto_extension(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_DescriptorProto_extension(Rest, Bin3,
				      TrUserData);
e_field_DescriptorProto_extension([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_DescriptorProto_nested_type(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_DescriptorProto(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_nested_type([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_DescriptorProto_nested_type(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_DescriptorProto_nested_type(Rest, Bin3,
					TrUserData);
e_field_DescriptorProto_nested_type([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_DescriptorProto_enum_type(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_EnumDescriptorProto(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_enum_type([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_DescriptorProto_enum_type(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_DescriptorProto_enum_type(Rest, Bin3,
				      TrUserData);
e_field_DescriptorProto_enum_type([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_DescriptorProto_extension_range(Msg, Bin,
					 TrUserData) ->
    SubBin = 'e_msg_DescriptorProto.ExtensionRange'(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_extension_range([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_DescriptorProto_extension_range(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_DescriptorProto_extension_range(Rest, Bin3,
					    TrUserData);
e_field_DescriptorProto_extension_range([], Bin,
					_TrUserData) ->
    Bin.

e_mfield_DescriptorProto_oneof_decl(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_OneofDescriptorProto(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_oneof_decl([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_mfield_DescriptorProto_oneof_decl(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_DescriptorProto_oneof_decl(Rest, Bin3,
				       TrUserData);
e_field_DescriptorProto_oneof_decl([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_DescriptorProto_options(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_MessageOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DescriptorProto_reserved_range(Msg, Bin,
					TrUserData) ->
    SubBin = 'e_msg_DescriptorProto.ReservedRange'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_reserved_range([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_mfield_DescriptorProto_reserved_range(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_DescriptorProto_reserved_range(Rest, Bin3,
					   TrUserData);
e_field_DescriptorProto_reserved_range([], Bin,
				       _TrUserData) ->
    Bin.

e_field_DescriptorProto_reserved_name([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_DescriptorProto_reserved_name(Rest, Bin3,
					  TrUserData);
e_field_DescriptorProto_reserved_name([], Bin,
				      _TrUserData) ->
    Bin.

'e_field_SourceCodeInfo.Location_path'(Elems, Bin,
				       TrUserData)
    when Elems =/= [] ->
    SubBin = 'e_pfield_SourceCodeInfo.Location_path'(Elems,
						     <<>>, TrUserData),
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_SourceCodeInfo.Location_path'([], Bin,
				       _TrUserData) ->
    Bin.

'e_pfield_SourceCodeInfo.Location_path'([Value | Rest],
					Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    'e_pfield_SourceCodeInfo.Location_path'(Rest, Bin2,
					    TrUserData);
'e_pfield_SourceCodeInfo.Location_path'([], Bin,
					_TrUserData) ->
    Bin.

'e_field_SourceCodeInfo.Location_span'(Elems, Bin,
				       TrUserData)
    when Elems =/= [] ->
    SubBin = 'e_pfield_SourceCodeInfo.Location_span'(Elems,
						     <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_SourceCodeInfo.Location_span'([], Bin,
				       _TrUserData) ->
    Bin.

'e_pfield_SourceCodeInfo.Location_span'([Value | Rest],
					Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    'e_pfield_SourceCodeInfo.Location_span'(Rest, Bin2,
					    TrUserData);
'e_pfield_SourceCodeInfo.Location_span'([], Bin,
					_TrUserData) ->
    Bin.

'e_field_SourceCodeInfo.Location_leading_detached_comments'([Elem
							     | Rest],
							    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    'e_field_SourceCodeInfo.Location_leading_detached_comments'(Rest,
								Bin3,
								TrUserData);
'e_field_SourceCodeInfo.Location_leading_detached_comments'([],
							    Bin, _TrUserData) ->
    Bin.

e_mfield_SourceCodeInfo_location(Msg, Bin,
				 TrUserData) ->
    SubBin = 'e_msg_SourceCodeInfo.Location'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SourceCodeInfo_location([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_SourceCodeInfo_location(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_SourceCodeInfo_location(Rest, Bin3, TrUserData);
e_field_SourceCodeInfo_location([], Bin, _TrUserData) ->
    Bin.

e_field_FileDescriptorProto_dependency([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_FileDescriptorProto_dependency(Rest, Bin3,
					   TrUserData);
e_field_FileDescriptorProto_dependency([], Bin,
				       _TrUserData) ->
    Bin.

e_field_FileDescriptorProto_public_dependency([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 80>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2),
    e_field_FileDescriptorProto_public_dependency(Rest,
						  Bin3, TrUserData);
e_field_FileDescriptorProto_public_dependency([], Bin,
					      _TrUserData) ->
    Bin.

e_field_FileDescriptorProto_weak_dependency([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 88>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2),
    e_field_FileDescriptorProto_weak_dependency(Rest, Bin3,
						TrUserData);
e_field_FileDescriptorProto_weak_dependency([], Bin,
					    _TrUserData) ->
    Bin.

e_mfield_FileDescriptorProto_message_type(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_DescriptorProto(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_message_type([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_FileDescriptorProto_message_type(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_FileDescriptorProto_message_type(Rest, Bin3,
					     TrUserData);
e_field_FileDescriptorProto_message_type([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_FileDescriptorProto_enum_type(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_EnumDescriptorProto(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_enum_type([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_FileDescriptorProto_enum_type(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_FileDescriptorProto_enum_type(Rest, Bin3,
					  TrUserData);
e_field_FileDescriptorProto_enum_type([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_FileDescriptorProto_service(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_ServiceDescriptorProto(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_service([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_FileDescriptorProto_service(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_FileDescriptorProto_service(Rest, Bin3,
					TrUserData);
e_field_FileDescriptorProto_service([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_FileDescriptorProto_extension(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_FieldDescriptorProto(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_extension([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_FileDescriptorProto_extension(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_FileDescriptorProto_extension(Rest, Bin3,
					  TrUserData);
e_field_FileDescriptorProto_extension([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_FileDescriptorProto_options(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_FileOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FileDescriptorProto_source_code_info(Msg, Bin,
					      TrUserData) ->
    SubBin = e_msg_SourceCodeInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FileDescriptorSet_file(Msg, Bin, TrUserData) ->
    SubBin = e_msg_FileDescriptorProto(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorSet_file([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_FileDescriptorSet_file(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_FileDescriptorSet_file(Rest, Bin3, TrUserData);
e_field_FileDescriptorSet_file([], Bin, _TrUserData) ->
    Bin.



'e_enum_FieldDescriptorProto.Type'('TYPE_DOUBLE',
				   Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_FLOAT', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_INT64', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_UINT64',
				   Bin) ->
    <<Bin/binary, 4>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_INT32', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_FIXED64',
				   Bin) ->
    <<Bin/binary, 6>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_FIXED32',
				   Bin) ->
    <<Bin/binary, 7>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_BOOL', Bin) ->
    <<Bin/binary, 8>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_STRING',
				   Bin) ->
    <<Bin/binary, 9>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_GROUP', Bin) ->
    <<Bin/binary, 10>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_MESSAGE',
				   Bin) ->
    <<Bin/binary, 11>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_BYTES', Bin) ->
    <<Bin/binary, 12>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_UINT32',
				   Bin) ->
    <<Bin/binary, 13>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_ENUM', Bin) ->
    <<Bin/binary, 14>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SFIXED32',
				   Bin) ->
    <<Bin/binary, 15>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SFIXED64',
				   Bin) ->
    <<Bin/binary, 16>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SINT32',
				   Bin) ->
    <<Bin/binary, 17>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SINT64',
				   Bin) ->
    <<Bin/binary, 18>>;
'e_enum_FieldDescriptorProto.Type'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_FieldDescriptorProto.Label'('LABEL_OPTIONAL',
				    Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldDescriptorProto.Label'('LABEL_REQUIRED',
				    Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FieldDescriptorProto.Label'('LABEL_REPEATED',
				    Bin) ->
    <<Bin/binary, 3>>;
'e_enum_FieldDescriptorProto.Label'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_FileOptions.OptimizeMode'('SPEED', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FileOptions.OptimizeMode'('CODE_SIZE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FileOptions.OptimizeMode'('LITE_RUNTIME',
				  Bin) ->
    <<Bin/binary, 3>>;
'e_enum_FileOptions.OptimizeMode'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_FieldOptions.CType'('STRING', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_FieldOptions.CType'('CORD', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldOptions.CType'('STRING_PIECE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FieldOptions.CType'(V, Bin) -> e_varint(V, Bin).

'e_enum_FieldOptions.JSType'('JS_NORMAL', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_FieldOptions.JSType'('JS_STRING', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldOptions.JSType'('JS_NUMBER', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FieldOptions.JSType'(V, Bin) ->
    e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_type_double(V, Bin) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin) ->
    <<Bin/binary, 0:48, 248, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'OneofDescriptorProto' ->
	  d_msg_OneofDescriptorProto(Bin, TrUserData);
      'UninterpretedOption.NamePart' ->
	  'd_msg_UninterpretedOption.NamePart'(Bin, TrUserData);
      'UninterpretedOption' ->
	  d_msg_UninterpretedOption(Bin, TrUserData);
      'DescriptorProto.ReservedRange' ->
	  'd_msg_DescriptorProto.ReservedRange'(Bin, TrUserData);
      'DescriptorProto.ExtensionRange' ->
	  'd_msg_DescriptorProto.ExtensionRange'(Bin, TrUserData);
      'FileOptions' -> d_msg_FileOptions(Bin, TrUserData);
      'MethodOptions' -> d_msg_MethodOptions(Bin, TrUserData);
      'EnumOptions' -> d_msg_EnumOptions(Bin, TrUserData);
      'EnumValueOptions' ->
	  d_msg_EnumValueOptions(Bin, TrUserData);
      'GeneratedCodeInfo.Annotation' ->
	  'd_msg_GeneratedCodeInfo.Annotation'(Bin, TrUserData);
      'GeneratedCodeInfo' ->
	  d_msg_GeneratedCodeInfo(Bin, TrUserData);
      'ServiceOptions' ->
	  d_msg_ServiceOptions(Bin, TrUserData);
      'MethodDescriptorProto' ->
	  d_msg_MethodDescriptorProto(Bin, TrUserData);
      'ServiceDescriptorProto' ->
	  d_msg_ServiceDescriptorProto(Bin, TrUserData);
      'MessageOptions' ->
	  d_msg_MessageOptions(Bin, TrUserData);
      'EnumValueDescriptorProto' ->
	  d_msg_EnumValueDescriptorProto(Bin, TrUserData);
      'EnumDescriptorProto' ->
	  d_msg_EnumDescriptorProto(Bin, TrUserData);
      'FieldOptions' -> d_msg_FieldOptions(Bin, TrUserData);
      'FieldDescriptorProto' ->
	  d_msg_FieldDescriptorProto(Bin, TrUserData);
      'DescriptorProto' ->
	  d_msg_DescriptorProto(Bin, TrUserData);
      'SourceCodeInfo.Location' ->
	  'd_msg_SourceCodeInfo.Location'(Bin, TrUserData);
      'SourceCodeInfo' ->
	  d_msg_SourceCodeInfo(Bin, TrUserData);
      'FileDescriptorProto' ->
	  d_msg_FileDescriptorProto(Bin, TrUserData);
      'FileDescriptorSet' ->
	  d_msg_FileDescriptorSet(Bin, TrUserData)
    end.



d_msg_OneofDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_OneofDescriptorProto(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_OneofDescriptorProto(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_OneofDescriptorProto_name(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_OneofDescriptorProto(<<>>, 0, 0, F1,
					_) ->
    #'OneofDescriptorProto'{name = F1};
dfp_read_field_def_OneofDescriptorProto(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_OneofDescriptorProto(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_OneofDescriptorProto(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OneofDescriptorProto(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_OneofDescriptorProto(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OneofDescriptorProto_name(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OneofDescriptorProto(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_OneofDescriptorProto(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_OneofDescriptorProto(Rest, 0, 0,
							   F1, TrUserData);
	    5 ->
		skip_32_OneofDescriptorProto(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_OneofDescriptorProto(<<>>, 0, 0, F1,
				       _) ->
    #'OneofDescriptorProto'{name = F1}.

d_field_OneofDescriptorProto_name(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_OneofDescriptorProto_name(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_OneofDescriptorProto_name(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_OneofDescriptorProto(Rest2, 0, 0,
					    NewFValue, TrUserData).


skip_varint_OneofDescriptorProto(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_OneofDescriptorProto(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_OneofDescriptorProto(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_OneofDescriptorProto(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_OneofDescriptorProto(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OneofDescriptorProto(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_OneofDescriptorProto(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OneofDescriptorProto(Rest2, 0, 0, F1,
					    TrUserData).


skip_32_OneofDescriptorProto(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_OneofDescriptorProto(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_OneofDescriptorProto(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_OneofDescriptorProto(Rest, Z1, Z2,
					    F1, TrUserData).


'd_msg_UninterpretedOption.NamePart'(Bin, TrUserData) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

'dfp_read_field_def_UninterpretedOption.NamePart'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, TrUserData) ->
    'd_field_UninterpretedOption.NamePart_name_part'(Rest,
						     Z1, Z2, F1, F2,
						     TrUserData);
'dfp_read_field_def_UninterpretedOption.NamePart'(<<16,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, TrUserData) ->
    'd_field_UninterpretedOption.NamePart_is_extension'(Rest,
							Z1, Z2, F1, F2,
							TrUserData);
'dfp_read_field_def_UninterpretedOption.NamePart'(<<>>,
						  0, 0, F1, F2, _) ->
    #'UninterpretedOption.NamePart'{name_part = F1,
				    is_extension = F2};
'dfp_read_field_def_UninterpretedOption.NamePart'(Other,
						  Z1, Z2, F1, F2, TrUserData) ->
    'dg_read_field_def_UninterpretedOption.NamePart'(Other,
						     Z1, Z2, F1, F2,
						     TrUserData).

'dg_read_field_def_UninterpretedOption.NamePart'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_UninterpretedOption.NamePart'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, TrUserData);
'dg_read_field_def_UninterpretedOption.NamePart'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_UninterpretedOption.NamePart_name_part'(Rest,
							   0, 0, F1, F2,
							   TrUserData);
      16 ->
	  'd_field_UninterpretedOption.NamePart_is_extension'(Rest,
							      0, 0, F1, F2,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_UninterpretedOption.NamePart'(Rest, 0, 0,
							   F1, F2, TrUserData);
	    1 ->
		'skip_64_UninterpretedOption.NamePart'(Rest, 0, 0, F1,
						       F2, TrUserData);
	    2 ->
		'skip_length_delimited_UninterpretedOption.NamePart'(Rest,
								     0, 0, F1,
								     F2,
								     TrUserData);
	    5 ->
		'skip_32_UninterpretedOption.NamePart'(Rest, 0, 0, F1,
						       F2, TrUserData)
	  end
    end;
'dg_read_field_def_UninterpretedOption.NamePart'(<<>>,
						 0, 0, F1, F2, _) ->
    #'UninterpretedOption.NamePart'{name_part = F1,
				    is_extension = F2}.

'd_field_UninterpretedOption.NamePart_name_part'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_UninterpretedOption.NamePart_name_part'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, TrUserData);
'd_field_UninterpretedOption.NamePart_name_part'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest2,
						      0, 0, NewFValue, F2,
						      TrUserData).


'd_field_UninterpretedOption.NamePart_is_extension'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_UninterpretedOption.NamePart_is_extension'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, TrUserData);
'd_field_UninterpretedOption.NamePart_is_extension'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, _,
						    TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      0, 0, F1, NewFValue,
						      TrUserData).


'skip_varint_UninterpretedOption.NamePart'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_UninterpretedOption.NamePart'(Rest, Z1, Z2,
					       F1, F2, TrUserData);
'skip_varint_UninterpretedOption.NamePart'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData).


'skip_length_delimited_UninterpretedOption.NamePart'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_UninterpretedOption.NamePart'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, TrUserData);
'skip_length_delimited_UninterpretedOption.NamePart'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest2,
						      0, 0, F1, F2, TrUserData).


'skip_32_UninterpretedOption.NamePart'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData).


'skip_64_UninterpretedOption.NamePart'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      Z1, Z2, F1, F2,
						      TrUserData).


d_msg_UninterpretedOption(Bin, TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Bin, 0, 0,
					   id([], TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_UninterpretedOption(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_name(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_UninterpretedOption(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_identifier_value(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 TrUserData);
dfp_read_field_def_UninterpretedOption(<<32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_positive_int_value(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, TrUserData);
dfp_read_field_def_UninterpretedOption(<<40,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_negative_int_value(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, TrUserData);
dfp_read_field_def_UninterpretedOption(<<49,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_double_value(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7,
					     TrUserData);
dfp_read_field_def_UninterpretedOption(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_string_value(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7,
					     TrUserData);
dfp_read_field_def_UninterpretedOption(<<66,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    d_field_UninterpretedOption_aggregate_value(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						TrUserData);
dfp_read_field_def_UninterpretedOption(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, TrUserData) ->
    #'UninterpretedOption'{name =
			       lists_reverse(F1, TrUserData),
			   identifier_value = F2, positive_int_value = F3,
			   negative_int_value = F4, double_value = F5,
			   string_value = F6, aggregate_value = F7};
dfp_read_field_def_UninterpretedOption(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7,
				       TrUserData) ->
    dg_read_field_def_UninterpretedOption(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, TrUserData).

dg_read_field_def_UninterpretedOption(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7,
				      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UninterpretedOption(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, TrUserData);
dg_read_field_def_UninterpretedOption(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7,
				      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_UninterpretedOption_name(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, TrUserData);
      26 ->
	  d_field_UninterpretedOption_identifier_value(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, TrUserData);
      32 ->
	  d_field_UninterpretedOption_positive_int_value(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, TrUserData);
      40 ->
	  d_field_UninterpretedOption_negative_int_value(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, TrUserData);
      49 ->
	  d_field_UninterpretedOption_double_value(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7,
						   TrUserData);
      58 ->
	  d_field_UninterpretedOption_string_value(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7,
						   TrUserData);
      66 ->
	  d_field_UninterpretedOption_aggregate_value(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UninterpretedOption(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, TrUserData);
	    1 ->
		skip_64_UninterpretedOption(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, TrUserData);
	    2 ->
		skip_length_delimited_UninterpretedOption(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, TrUserData);
	    5 ->
		skip_32_UninterpretedOption(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, TrUserData)
	  end
    end;
dg_read_field_def_UninterpretedOption(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, TrUserData) ->
    #'UninterpretedOption'{name =
			       lists_reverse(F1, TrUserData),
			   identifier_value = F2, positive_int_value = F3,
			   negative_int_value = F4, double_value = F5,
			   string_value = F6, aggregate_value = F7}.

d_field_UninterpretedOption_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_UninterpretedOption_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     TrUserData);
d_field_UninterpretedOption_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_UninterpretedOption.NamePart'(Bs,
							TrUserData),
		   TrUserData),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0,
					   cons(NewFValue, F1, TrUserData), F2,
					   F3, F4, F5, F6, F7, TrUserData).


d_field_UninterpretedOption_identifier_value(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     TrUserData)
    when N < 57 ->
    d_field_UninterpretedOption_identifier_value(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7,
						 TrUserData);
d_field_UninterpretedOption_identifier_value(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, _, F3, F4, F5, F6, F7,
					     TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7,
					   TrUserData).


d_field_UninterpretedOption_positive_int_value(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, TrUserData)
    when N < 57 ->
    d_field_UninterpretedOption_positive_int_value(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData);
d_field_UninterpretedOption_positive_int_value(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, _, F4, F5, F6,
					       F7, TrUserData) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_UninterpretedOption(Rest, 0, 0, F1,
					   F2, NewFValue, F4, F5, F6, F7,
					   TrUserData).


d_field_UninterpretedOption_negative_int_value(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, TrUserData)
    when N < 57 ->
    d_field_UninterpretedOption_negative_int_value(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData);
d_field_UninterpretedOption_negative_int_value(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, _, F5, F6,
					       F7, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UninterpretedOption(Rest, 0, 0, F1,
					   F2, F3, NewFValue, F5, F6, F7,
					   TrUserData).


d_field_UninterpretedOption_double_value(<<0:48, 240,
					   127, Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, _, F6, F7,
					 TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, infinity, F6, F7,
					   TrUserData);
d_field_UninterpretedOption_double_value(<<0:48, 240,
					   255, Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, _, F6, F7,
					 TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, '-infinity', F6, F7,
					   TrUserData);
d_field_UninterpretedOption_double_value(<<_:48, 15:4,
					   _:4, _:1, 127:7, Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, _, F6, F7,
					 TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, nan, F6, F7, TrUserData);
d_field_UninterpretedOption_double_value(<<Value:64/little-float,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, _, F6, F7,
					 TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, Value, F6, F7,
					   TrUserData).


d_field_UninterpretedOption_string_value(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7,
					 TrUserData)
    when N < 57 ->
    d_field_UninterpretedOption_string_value(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, TrUserData);
d_field_UninterpretedOption_string_value(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, _, F7,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, NewFValue, F7,
					   TrUserData).


d_field_UninterpretedOption_aggregate_value(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    TrUserData)
    when N < 57 ->
    d_field_UninterpretedOption_aggregate_value(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, TrUserData);
d_field_UninterpretedOption_aggregate_value(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, _,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, NewFValue,
					   TrUserData).


skip_varint_UninterpretedOption(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    skip_varint_UninterpretedOption(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
skip_varint_UninterpretedOption(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


skip_length_delimited_UninterpretedOption(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_UninterpretedOption(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, TrUserData);
skip_length_delimited_UninterpretedOption(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


skip_32_UninterpretedOption(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


skip_64_UninterpretedOption(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, TrUserData).


'd_msg_DescriptorProto.ReservedRange'(Bin,
				      TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Bin,
						       0, 0,
						       id(undefined,
							  TrUserData),
						       id(undefined,
							  TrUserData),
						       TrUserData).

'dfp_read_field_def_DescriptorProto.ReservedRange'(<<8,
						     Rest/binary>>,
						   Z1, Z2, F1, F2,
						   TrUserData) ->
    'd_field_DescriptorProto.ReservedRange_start'(Rest, Z1,
						  Z2, F1, F2, TrUserData);
'dfp_read_field_def_DescriptorProto.ReservedRange'(<<16,
						     Rest/binary>>,
						   Z1, Z2, F1, F2,
						   TrUserData) ->
    'd_field_DescriptorProto.ReservedRange_end'(Rest, Z1,
						Z2, F1, F2, TrUserData);
'dfp_read_field_def_DescriptorProto.ReservedRange'(<<>>,
						   0, 0, F1, F2, _) ->
    #'DescriptorProto.ReservedRange'{start = F1,
				     'end' = F2};
'dfp_read_field_def_DescriptorProto.ReservedRange'(Other,
						   Z1, Z2, F1, F2,
						   TrUserData) ->
    'dg_read_field_def_DescriptorProto.ReservedRange'(Other,
						      Z1, Z2, F1, F2,
						      TrUserData).

'dg_read_field_def_DescriptorProto.ReservedRange'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DescriptorProto.ReservedRange'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, TrUserData);
'dg_read_field_def_DescriptorProto.ReservedRange'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_DescriptorProto.ReservedRange_start'(Rest, 0,
							0, F1, F2, TrUserData);
      16 ->
	  'd_field_DescriptorProto.ReservedRange_end'(Rest, 0, 0,
						      F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DescriptorProto.ReservedRange'(Rest, 0, 0,
							    F1, F2, TrUserData);
	    1 ->
		'skip_64_DescriptorProto.ReservedRange'(Rest, 0, 0, F1,
							F2, TrUserData);
	    2 ->
		'skip_length_delimited_DescriptorProto.ReservedRange'(Rest,
								      0, 0, F1,
								      F2,
								      TrUserData);
	    5 ->
		'skip_32_DescriptorProto.ReservedRange'(Rest, 0, 0, F1,
							F2, TrUserData)
	  end
    end;
'dg_read_field_def_DescriptorProto.ReservedRange'(<<>>,
						  0, 0, F1, F2, _) ->
    #'DescriptorProto.ReservedRange'{start = F1,
				     'end' = F2}.

'd_field_DescriptorProto.ReservedRange_start'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_DescriptorProto.ReservedRange_start'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
'd_field_DescriptorProto.ReservedRange_start'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Rest,
						       0, 0, NewFValue, F2,
						       TrUserData).


'd_field_DescriptorProto.ReservedRange_end'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_DescriptorProto.ReservedRange_end'(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
'd_field_DescriptorProto.ReservedRange_end'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Rest,
						       0, 0, F1, NewFValue,
						       TrUserData).


'skip_varint_DescriptorProto.ReservedRange'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_DescriptorProto.ReservedRange'(Rest, Z1,
						Z2, F1, F2, TrUserData);
'skip_varint_DescriptorProto.ReservedRange'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData).


'skip_length_delimited_DescriptorProto.ReservedRange'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2,
						      TrUserData)
    when N < 57 ->
    'skip_length_delimited_DescriptorProto.ReservedRange'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, TrUserData);
'skip_length_delimited_DescriptorProto.ReservedRange'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Rest2,
						       0, 0, F1, F2,
						       TrUserData).


'skip_32_DescriptorProto.ReservedRange'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData).


'skip_64_DescriptorProto.ReservedRange'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ReservedRange'(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData).


'd_msg_DescriptorProto.ExtensionRange'(Bin,
				       TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Bin,
							0, 0,
							id(undefined,
							   TrUserData),
							id(undefined,
							   TrUserData),
							TrUserData).

'dfp_read_field_def_DescriptorProto.ExtensionRange'(<<8,
						      Rest/binary>>,
						    Z1, Z2, F1, F2,
						    TrUserData) ->
    'd_field_DescriptorProto.ExtensionRange_start'(Rest, Z1,
						   Z2, F1, F2, TrUserData);
'dfp_read_field_def_DescriptorProto.ExtensionRange'(<<16,
						      Rest/binary>>,
						    Z1, Z2, F1, F2,
						    TrUserData) ->
    'd_field_DescriptorProto.ExtensionRange_end'(Rest, Z1,
						 Z2, F1, F2, TrUserData);
'dfp_read_field_def_DescriptorProto.ExtensionRange'(<<>>,
						    0, 0, F1, F2, _) ->
    #'DescriptorProto.ExtensionRange'{start = F1,
				      'end' = F2};
'dfp_read_field_def_DescriptorProto.ExtensionRange'(Other,
						    Z1, Z2, F1, F2,
						    TrUserData) ->
    'dg_read_field_def_DescriptorProto.ExtensionRange'(Other,
						       Z1, Z2, F1, F2,
						       TrUserData).

'dg_read_field_def_DescriptorProto.ExtensionRange'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_DescriptorProto.ExtensionRange'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
'dg_read_field_def_DescriptorProto.ExtensionRange'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_DescriptorProto.ExtensionRange_start'(Rest, 0,
							 0, F1, F2, TrUserData);
      16 ->
	  'd_field_DescriptorProto.ExtensionRange_end'(Rest, 0, 0,
						       F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DescriptorProto.ExtensionRange'(Rest, 0, 0,
							     F1, F2,
							     TrUserData);
	    1 ->
		'skip_64_DescriptorProto.ExtensionRange'(Rest, 0, 0, F1,
							 F2, TrUserData);
	    2 ->
		'skip_length_delimited_DescriptorProto.ExtensionRange'(Rest,
								       0, 0, F1,
								       F2,
								       TrUserData);
	    5 ->
		'skip_32_DescriptorProto.ExtensionRange'(Rest, 0, 0, F1,
							 F2, TrUserData)
	  end
    end;
'dg_read_field_def_DescriptorProto.ExtensionRange'(<<>>,
						   0, 0, F1, F2, _) ->
    #'DescriptorProto.ExtensionRange'{start = F1,
				      'end' = F2}.

'd_field_DescriptorProto.ExtensionRange_start'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_DescriptorProto.ExtensionRange_start'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
'd_field_DescriptorProto.ExtensionRange_start'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							0, 0, NewFValue, F2,
							TrUserData).


'd_field_DescriptorProto.ExtensionRange_end'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_DescriptorProto.ExtensionRange_end'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 TrUserData);
'd_field_DescriptorProto.ExtensionRange_end'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							0, 0, F1, NewFValue,
							TrUserData).


'skip_varint_DescriptorProto.ExtensionRange'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_DescriptorProto.ExtensionRange'(Rest, Z1,
						 Z2, F1, F2, TrUserData);
'skip_varint_DescriptorProto.ExtensionRange'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							Z1, Z2, F1, F2,
							TrUserData).


'skip_length_delimited_DescriptorProto.ExtensionRange'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_DescriptorProto.ExtensionRange'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, TrUserData);
'skip_length_delimited_DescriptorProto.ExtensionRange'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest2,
							0, 0, F1, F2,
							TrUserData).


'skip_32_DescriptorProto.ExtensionRange'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							Z1, Z2, F1, F2,
							TrUserData).


'skip_64_DescriptorProto.ExtensionRange'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							Z1, Z2, F1, F2,
							TrUserData).


d_msg_FileOptions(Bin, TrUserData) ->
    dfp_read_field_def_FileOptions(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id([], TrUserData), TrUserData).

dfp_read_field_def_FileOptions(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_java_package(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, TrUserData);
dfp_read_field_def_FileOptions(<<66, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_java_outer_classname(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     TrUserData);
dfp_read_field_def_FileOptions(<<80, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_java_multiple_files(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    TrUserData);
dfp_read_field_def_FileOptions(<<160, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_java_generate_equals_and_hash(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, TrUserData);
dfp_read_field_def_FileOptions(<<216, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_java_string_check_utf8(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, TrUserData);
dfp_read_field_def_FileOptions(<<72, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_optimize_for(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, TrUserData);
dfp_read_field_def_FileOptions(<<90, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_go_package(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData);
dfp_read_field_def_FileOptions(<<128, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_cc_generic_services(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    TrUserData);
dfp_read_field_def_FileOptions(<<136, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_java_generic_services(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, TrUserData);
dfp_read_field_def_FileOptions(<<144, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_py_generic_services(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    TrUserData);
dfp_read_field_def_FileOptions(<<184, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_deprecated(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData);
dfp_read_field_def_FileOptions(<<248, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_cc_enable_arenas(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16,
					 TrUserData);
dfp_read_field_def_FileOptions(<<162, 2, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_objc_class_prefix(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16,
					  TrUserData);
dfp_read_field_def_FileOptions(<<170, 2, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_csharp_namespace(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16,
					 TrUserData);
dfp_read_field_def_FileOptions(<<176, 2, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_javanano_use_deprecated_package(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, TrUserData);
dfp_read_field_def_FileOptions(<<186, 62, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    d_field_FileOptions_uninterpreted_option(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     TrUserData);
dfp_read_field_def_FileOptions(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			       F15, F16, TrUserData) ->
    #'FileOptions'{java_package = F1,
		   java_outer_classname = F2, java_multiple_files = F3,
		   java_generate_equals_and_hash = F4,
		   java_string_check_utf8 = F5, optimize_for = F6,
		   go_package = F7, cc_generic_services = F8,
		   java_generic_services = F9, py_generic_services = F10,
		   deprecated = F11, cc_enable_arenas = F12,
		   objc_class_prefix = F13, csharp_namespace = F14,
		   javanano_use_deprecated_package = F15,
		   uninterpreted_option = lists_reverse(F16, TrUserData)};
dfp_read_field_def_FileOptions(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			       F14, F15, F16, TrUserData) ->
    dg_read_field_def_FileOptions(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, TrUserData).

dg_read_field_def_FileOptions(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FileOptions(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16,
				  TrUserData);
dg_read_field_def_FileOptions(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FileOptions_java_package(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, TrUserData);
      66 ->
	  d_field_FileOptions_java_outer_classname(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, TrUserData);
      80 ->
	  d_field_FileOptions_java_multiple_files(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, TrUserData);
      160 ->
	  d_field_FileOptions_java_generate_equals_and_hash(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, F14, F15, F16,
							    TrUserData);
      216 ->
	  d_field_FileOptions_java_string_check_utf8(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, TrUserData);
      72 ->
	  d_field_FileOptions_optimize_for(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, TrUserData);
      90 ->
	  d_field_FileOptions_go_package(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, TrUserData);
      128 ->
	  d_field_FileOptions_cc_generic_services(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, TrUserData);
      136 ->
	  d_field_FileOptions_java_generic_services(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, TrUserData);
      144 ->
	  d_field_FileOptions_py_generic_services(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, TrUserData);
      184 ->
	  d_field_FileOptions_deprecated(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, TrUserData);
      248 ->
	  d_field_FileOptions_cc_enable_arenas(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       TrUserData);
      290 ->
	  d_field_FileOptions_objc_class_prefix(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, TrUserData);
      298 ->
	  d_field_FileOptions_csharp_namespace(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       TrUserData);
      304 ->
	  d_field_FileOptions_javanano_use_deprecated_package(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16,
							      TrUserData);
      7994 ->
	  d_field_FileOptions_uninterpreted_option(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FileOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, TrUserData);
	    1 ->
		skip_64_FileOptions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12, F13, F14, F15,
				    F16, TrUserData);
	    2 ->
		skip_length_delimited_FileOptions(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, TrUserData);
	    5 ->
		skip_32_FileOptions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9, F10, F11, F12, F13, F14, F15,
				    F16, TrUserData)
	  end
    end;
dg_read_field_def_FileOptions(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			      F15, F16, TrUserData) ->
    #'FileOptions'{java_package = F1,
		   java_outer_classname = F2, java_multiple_files = F3,
		   java_generate_equals_and_hash = F4,
		   java_string_check_utf8 = F5, optimize_for = F6,
		   go_package = F7, cc_generic_services = F8,
		   java_generic_services = F9, py_generic_services = F10,
		   deprecated = F11, cc_enable_arenas = F12,
		   objc_class_prefix = F13, csharp_namespace = F14,
		   javanano_use_deprecated_package = F15,
		   uninterpreted_option = lists_reverse(F16, TrUserData)}.

d_field_FileOptions_java_package(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_FileOptions_java_package(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     TrUserData);
d_field_FileOptions_java_package(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, F14, F15, F16, TrUserData).


d_field_FileOptions_java_outer_classname(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 TrUserData)
    when N < 57 ->
    d_field_FileOptions_java_outer_classname(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, TrUserData);
d_field_FileOptions_java_outer_classname(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				   F11, F12, F13, F14, F15, F16, TrUserData).


d_field_FileOptions_java_multiple_files(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					TrUserData)
    when N < 57 ->
    d_field_FileOptions_java_multiple_files(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, TrUserData);
d_field_FileOptions_java_multiple_files(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, F14, F15, F16, TrUserData).


d_field_FileOptions_java_generate_equals_and_hash(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16,
						  TrUserData)
    when N < 57 ->
    d_field_FileOptions_java_generate_equals_and_hash(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, F14, F15, F16,
						      TrUserData);
d_field_FileOptions_java_generate_equals_and_hash(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, _, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16,
						  TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_java_string_check_utf8(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, TrUserData)
    when N < 57 ->
    d_field_FileOptions_java_string_check_utf8(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16,
					       TrUserData);
d_field_FileOptions_java_string_check_utf8(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, _, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_optimize_for(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_FileOptions_optimize_for(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     TrUserData);
d_field_FileOptions_optimize_for(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FileOptions.OptimizeMode'(Tmp),
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_go_package(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_FileOptions_go_package(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   TrUserData);
d_field_FileOptions_go_package(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_cc_generic_services(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					TrUserData)
    when N < 57 ->
    d_field_FileOptions_cc_generic_services(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, TrUserData);
d_field_FileOptions_cc_generic_services(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
					F9, F10, F11, F12, F13, F14, F15, F16,
					TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, NewFValue, F9, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_java_generic_services(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, TrUserData)
    when N < 57 ->
    d_field_FileOptions_java_generic_services(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, TrUserData);
d_field_FileOptions_java_generic_services(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, _, F10, F11, F12, F13, F14, F15,
					  F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, NewFValue, F10, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_py_generic_services(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					TrUserData)
    when N < 57 ->
    d_field_FileOptions_py_generic_services(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, TrUserData);
d_field_FileOptions_py_generic_services(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, _, F11, F12, F13, F14, F15, F16,
					TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_deprecated(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    d_field_FileOptions_deprecated(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   TrUserData);
d_field_FileOptions_deprecated(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       _, F12, F13, F14, F15, F16, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_cc_enable_arenas(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16,
				     TrUserData)
    when N < 57 ->
    d_field_FileOptions_cc_enable_arenas(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, TrUserData);
d_field_FileOptions_cc_enable_arenas(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, _, F13, F14, F15, F16,
				     TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				   F13, F14, F15, F16, TrUserData).


d_field_FileOptions_objc_class_prefix(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      TrUserData)
    when N < 57 ->
    d_field_FileOptions_objc_class_prefix(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, TrUserData);
d_field_FileOptions_objc_class_prefix(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, _, F14, F15, F16,
				      TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   NewFValue, F14, F15, F16, TrUserData).


d_field_FileOptions_csharp_namespace(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16,
				     TrUserData)
    when N < 57 ->
    d_field_FileOptions_csharp_namespace(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, TrUserData);
d_field_FileOptions_csharp_namespace(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, _, F15, F16,
				     TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   NewFValue, F15, F16, TrUserData).


d_field_FileOptions_javanano_use_deprecated_package(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    TrUserData)
    when N < 57 ->
    d_field_FileOptions_javanano_use_deprecated_package(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							TrUserData);
d_field_FileOptions_javanano_use_deprecated_package(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, _, F16,
						    TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, NewFValue, F16, TrUserData).


d_field_FileOptions_uninterpreted_option(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 TrUserData)
    when N < 57 ->
    d_field_FileOptions_uninterpreted_option(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, TrUserData);
d_field_FileOptions_uninterpreted_option(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, cons(NewFValue, F16, TrUserData),
				   TrUserData).


skip_varint_FileOptions(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData) ->
    skip_varint_FileOptions(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			    F16, TrUserData);
skip_varint_FileOptions(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13, F14, F15, F16, TrUserData) ->
    dfp_read_field_def_FileOptions(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


skip_length_delimited_FileOptions(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, TrUserData)
    when N < 57 ->
    skip_length_delimited_FileOptions(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      TrUserData);
skip_length_delimited_FileOptions(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


skip_32_FileOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		    F15, F16, TrUserData) ->
    dfp_read_field_def_FileOptions(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


skip_64_FileOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		    F15, F16, TrUserData) ->
    dfp_read_field_def_FileOptions(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, TrUserData).


d_msg_MethodOptions(Bin, TrUserData) ->
    dfp_read_field_def_MethodOptions(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_MethodOptions(<<136, 2,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_MethodOptions_deprecated(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_MethodOptions(<<186, 62,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_MethodOptions_uninterpreted_option(Rest, Z1, Z2,
					       F1, F2, TrUserData);
dfp_read_field_def_MethodOptions(<<>>, 0, 0, F1, F2,
				 TrUserData) ->
    #'MethodOptions'{deprecated = F1,
		     uninterpreted_option = lists_reverse(F2, TrUserData)};
dfp_read_field_def_MethodOptions(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_MethodOptions(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_MethodOptions(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MethodOptions(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_MethodOptions(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      264 ->
	  d_field_MethodOptions_deprecated(Rest, 0, 0, F1, F2,
					   TrUserData);
      7994 ->
	  d_field_MethodOptions_uninterpreted_option(Rest, 0, 0,
						     F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MethodOptions(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_MethodOptions(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_MethodOptions(Rest, 0, 0, F1, F2,
						    TrUserData);
	    5 ->
		skip_32_MethodOptions(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_MethodOptions(<<>>, 0, 0, F1, F2,
				TrUserData) ->
    #'MethodOptions'{deprecated = F1,
		     uninterpreted_option = lists_reverse(F2, TrUserData)}.

d_field_MethodOptions_deprecated(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MethodOptions_deprecated(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_MethodOptions_deprecated(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MethodOptions(Rest, 0, 0, NewFValue,
				     F2, TrUserData).


d_field_MethodOptions_uninterpreted_option(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_MethodOptions_uninterpreted_option(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
d_field_MethodOptions_uninterpreted_option(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_MethodOptions(Rest2, 0, 0, F1,
				     cons(NewFValue, F2, TrUserData),
				     TrUserData).


skip_varint_MethodOptions(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_MethodOptions(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_MethodOptions(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_MethodOptions(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_MethodOptions(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MethodOptions(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_MethodOptions(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MethodOptions(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_32_MethodOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_MethodOptions(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_MethodOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_MethodOptions(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_EnumOptions(Bin, TrUserData) ->
    dfp_read_field_def_EnumOptions(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id([], TrUserData), TrUserData).

dfp_read_field_def_EnumOptions(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumOptions_allow_alias(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_EnumOptions(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumOptions_deprecated(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_EnumOptions(<<186, 62, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumOptions_uninterpreted_option(Rest, Z1, Z2,
					     F1, F2, F3, TrUserData);
dfp_read_field_def_EnumOptions(<<>>, 0, 0, F1, F2, F3,
			       TrUserData) ->
    #'EnumOptions'{allow_alias = F1, deprecated = F2,
		   uninterpreted_option = lists_reverse(F3, TrUserData)};
dfp_read_field_def_EnumOptions(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_EnumOptions(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_EnumOptions(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnumOptions(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_EnumOptions(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_EnumOptions_allow_alias(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      24 ->
	  d_field_EnumOptions_deprecated(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      7994 ->
	  d_field_EnumOptions_uninterpreted_option(Rest, 0, 0, F1,
						   F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnumOptions(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_EnumOptions(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_EnumOptions(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    5 ->
		skip_32_EnumOptions(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_EnumOptions(<<>>, 0, 0, F1, F2, F3,
			      TrUserData) ->
    #'EnumOptions'{allow_alias = F1, deprecated = F2,
		   uninterpreted_option = lists_reverse(F3, TrUserData)}.

d_field_EnumOptions_allow_alias(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumOptions_allow_alias(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnumOptions_allow_alias(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EnumOptions(Rest, 0, 0, NewFValue,
				   F2, F3, TrUserData).


d_field_EnumOptions_deprecated(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumOptions_deprecated(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnumOptions_deprecated(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EnumOptions(Rest, 0, 0, F1,
				   NewFValue, F3, TrUserData).


d_field_EnumOptions_uninterpreted_option(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumOptions_uninterpreted_option(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
d_field_EnumOptions_uninterpreted_option(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_EnumOptions(Rest2, 0, 0, F1, F2,
				   cons(NewFValue, F3, TrUserData), TrUserData).


skip_varint_EnumOptions(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_EnumOptions(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_EnumOptions(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumOptions(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_EnumOptions(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnumOptions(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_EnumOptions(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumOptions(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_32_EnumOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_EnumOptions(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_EnumOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_EnumOptions(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_EnumValueOptions(Bin, TrUserData) ->
    dfp_read_field_def_EnumValueOptions(Bin, 0, 0,
					id(undefined, TrUserData),
					id([], TrUserData), TrUserData).

dfp_read_field_def_EnumValueOptions(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_EnumValueOptions_deprecated(Rest, Z1, Z2, F1,
					F2, TrUserData);
dfp_read_field_def_EnumValueOptions(<<186, 62,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    d_field_EnumValueOptions_uninterpreted_option(Rest, Z1,
						  Z2, F1, F2, TrUserData);
dfp_read_field_def_EnumValueOptions(<<>>, 0, 0, F1, F2,
				    TrUserData) ->
    #'EnumValueOptions'{deprecated = F1,
			uninterpreted_option = lists_reverse(F2, TrUserData)};
dfp_read_field_def_EnumValueOptions(Other, Z1, Z2, F1,
				    F2, TrUserData) ->
    dg_read_field_def_EnumValueOptions(Other, Z1, Z2, F1,
				       F2, TrUserData).

dg_read_field_def_EnumValueOptions(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnumValueOptions(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_EnumValueOptions(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EnumValueOptions_deprecated(Rest, 0, 0, F1, F2,
					      TrUserData);
      7994 ->
	  d_field_EnumValueOptions_uninterpreted_option(Rest, 0,
							0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnumValueOptions(Rest, 0, 0, F1, F2,
					     TrUserData);
	    1 ->
		skip_64_EnumValueOptions(Rest, 0, 0, F1, F2,
					 TrUserData);
	    2 ->
		skip_length_delimited_EnumValueOptions(Rest, 0, 0, F1,
						       F2, TrUserData);
	    5 ->
		skip_32_EnumValueOptions(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_EnumValueOptions(<<>>, 0, 0, F1, F2,
				   TrUserData) ->
    #'EnumValueOptions'{deprecated = F1,
			uninterpreted_option = lists_reverse(F2, TrUserData)}.

d_field_EnumValueOptions_deprecated(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EnumValueOptions_deprecated(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
d_field_EnumValueOptions_deprecated(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_EnumValueOptions(Rest, 0, 0,
					NewFValue, F2, TrUserData).


d_field_EnumValueOptions_uninterpreted_option(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EnumValueOptions_uninterpreted_option(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
d_field_EnumValueOptions_uninterpreted_option(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_EnumValueOptions(Rest2, 0, 0, F1,
					cons(NewFValue, F2, TrUserData),
					TrUserData).


skip_varint_EnumValueOptions(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_EnumValueOptions(Rest, Z1, Z2, F1, F2,
				 TrUserData);
skip_varint_EnumValueOptions(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_EnumValueOptions(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_length_delimited_EnumValueOptions(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnumValueOptions(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_EnumValueOptions(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumValueOptions(Rest2, 0, 0, F1, F2,
					TrUserData).


skip_32_EnumValueOptions(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_EnumValueOptions(Rest, Z1, Z2, F1,
					F2, TrUserData).


skip_64_EnumValueOptions(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    dfp_read_field_def_EnumValueOptions(Rest, Z1, Z2, F1,
					F2, TrUserData).


'd_msg_GeneratedCodeInfo.Annotation'(Bin, TrUserData) ->
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Bin,
						      0, 0, id([], TrUserData),
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

'dfp_read_field_def_GeneratedCodeInfo.Annotation'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, F3, F4,
						  TrUserData) ->
    'd_field_GeneratedCodeInfo.Annotation_path'(Rest, Z1,
						Z2, F1, F2, F3, F4, TrUserData);
'dfp_read_field_def_GeneratedCodeInfo.Annotation'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, F3, F4,
						  TrUserData) ->
    'd_field_GeneratedCodeInfo.Annotation_source_file'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       TrUserData);
'dfp_read_field_def_GeneratedCodeInfo.Annotation'(<<24,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, F3, F4,
						  TrUserData) ->
    'd_field_GeneratedCodeInfo.Annotation_begin'(Rest, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData);
'dfp_read_field_def_GeneratedCodeInfo.Annotation'(<<32,
						    Rest/binary>>,
						  Z1, Z2, F1, F2, F3, F4,
						  TrUserData) ->
    'd_field_GeneratedCodeInfo.Annotation_end'(Rest, Z1, Z2,
					       F1, F2, F3, F4, TrUserData);
'dfp_read_field_def_GeneratedCodeInfo.Annotation'(<<>>,
						  0, 0, F1, F2, F3, F4,
						  TrUserData) ->
    #'GeneratedCodeInfo.Annotation'{path =
					lists_reverse(F1, TrUserData),
				    source_file = F2, 'begin' = F3, 'end' = F4};
'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Other,
						  Z1, Z2, F1, F2, F3, F4,
						  TrUserData) ->
    'dg_read_field_def_GeneratedCodeInfo.Annotation'(Other,
						     Z1, Z2, F1, F2, F3, F4,
						     TrUserData).

'dg_read_field_def_GeneratedCodeInfo.Annotation'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4,
						 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_GeneratedCodeInfo.Annotation'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, TrUserData);
'dg_read_field_def_GeneratedCodeInfo.Annotation'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_GeneratedCodeInfo.Annotation_path'(Rest, 0, 0,
						      F1, F2, F3, F4,
						      TrUserData);
      18 ->
	  'd_field_GeneratedCodeInfo.Annotation_source_file'(Rest,
							     0, 0, F1, F2, F3,
							     F4, TrUserData);
      24 ->
	  'd_field_GeneratedCodeInfo.Annotation_begin'(Rest, 0, 0,
						       F1, F2, F3, F4,
						       TrUserData);
      32 ->
	  'd_field_GeneratedCodeInfo.Annotation_end'(Rest, 0, 0,
						     F1, F2, F3, F4,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_GeneratedCodeInfo.Annotation'(Rest, 0, 0,
							   F1, F2, F3, F4,
							   TrUserData);
	    1 ->
		'skip_64_GeneratedCodeInfo.Annotation'(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    2 ->
		'skip_length_delimited_GeneratedCodeInfo.Annotation'(Rest,
								     0, 0, F1,
								     F2, F3, F4,
								     TrUserData);
	    5 ->
		'skip_32_GeneratedCodeInfo.Annotation'(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData)
	  end
    end;
'dg_read_field_def_GeneratedCodeInfo.Annotation'(<<>>,
						 0, 0, F1, F2, F3, F4,
						 TrUserData) ->
    #'GeneratedCodeInfo.Annotation'{path =
					lists_reverse(F1, TrUserData),
				    source_file = F2, 'begin' = F3, 'end' = F4}.

'd_field_GeneratedCodeInfo.Annotation_path'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    'd_field_GeneratedCodeInfo.Annotation_path'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						TrUserData);
'd_field_GeneratedCodeInfo.Annotation_path'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_GeneratedCodeInfo.Annotation_path'(PackedBytes,
							   0, 0, F1),
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest2,
						      0, 0, NewSeq, F2, F3, F4,
						      TrUserData).


'd_packed_field_GeneratedCodeInfo.Annotation_path'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, AccSeq)
    when N < 57 ->
    'd_packed_field_GeneratedCodeInfo.Annotation_path'(Rest,
						       N + 7, X bsl N + Acc,
						       AccSeq);
'd_packed_field_GeneratedCodeInfo.Annotation_path'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'd_packed_field_GeneratedCodeInfo.Annotation_path'(Rest,
						       0, 0,
						       [NewFValue | AccSeq]);
'd_packed_field_GeneratedCodeInfo.Annotation_path'(<<>>,
						   0, 0, AccSeq) ->
    AccSeq.


'd_field_GeneratedCodeInfo.Annotation_source_file'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4,
						   TrUserData)
    when N < 57 ->
    'd_field_GeneratedCodeInfo.Annotation_source_file'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, TrUserData);
'd_field_GeneratedCodeInfo.Annotation_source_file'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, _, F3, F4,
						   TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest2,
						      0, 0, F1, NewFValue, F3,
						      F4, TrUserData).


'd_field_GeneratedCodeInfo.Annotation_begin'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    'd_field_GeneratedCodeInfo.Annotation_begin'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, TrUserData);
'd_field_GeneratedCodeInfo.Annotation_begin'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, _, F4,
					     TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest,
						      0, 0, F1, F2, NewFValue,
						      F4, TrUserData).


'd_field_GeneratedCodeInfo.Annotation_end'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    'd_field_GeneratedCodeInfo.Annotation_end'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       TrUserData);
'd_field_GeneratedCodeInfo.Annotation_end'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest,
						      0, 0, F1, F2, F3,
						      NewFValue, TrUserData).


'skip_varint_GeneratedCodeInfo.Annotation'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4,
					   TrUserData) ->
    'skip_varint_GeneratedCodeInfo.Annotation'(Rest, Z1, Z2,
					       F1, F2, F3, F4, TrUserData);
'skip_varint_GeneratedCodeInfo.Annotation'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4,
					   TrUserData) ->
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      TrUserData).


'skip_length_delimited_GeneratedCodeInfo.Annotation'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4,
						     TrUserData)
    when N < 57 ->
    'skip_length_delimited_GeneratedCodeInfo.Annotation'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4,
							 TrUserData);
'skip_length_delimited_GeneratedCodeInfo.Annotation'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest2,
						      0, 0, F1, F2, F3, F4,
						      TrUserData).


'skip_32_GeneratedCodeInfo.Annotation'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      TrUserData).


'skip_64_GeneratedCodeInfo.Annotation'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    'dfp_read_field_def_GeneratedCodeInfo.Annotation'(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      TrUserData).


d_msg_GeneratedCodeInfo(Bin, TrUserData) ->
    dfp_read_field_def_GeneratedCodeInfo(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_GeneratedCodeInfo(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_GeneratedCodeInfo_annotation(Rest, Z1, Z2, F1,
					 TrUserData);
dfp_read_field_def_GeneratedCodeInfo(<<>>, 0, 0, F1,
				     TrUserData) ->
    #'GeneratedCodeInfo'{annotation =
			     lists_reverse(F1, TrUserData)};
dfp_read_field_def_GeneratedCodeInfo(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_GeneratedCodeInfo(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_GeneratedCodeInfo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GeneratedCodeInfo(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GeneratedCodeInfo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GeneratedCodeInfo_annotation(Rest, 0, 0, F1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GeneratedCodeInfo(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_GeneratedCodeInfo(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GeneratedCodeInfo(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_GeneratedCodeInfo(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GeneratedCodeInfo(<<>>, 0, 0, F1,
				    TrUserData) ->
    #'GeneratedCodeInfo'{annotation =
			     lists_reverse(F1, TrUserData)}.

d_field_GeneratedCodeInfo_annotation(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GeneratedCodeInfo_annotation(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
d_field_GeneratedCodeInfo_annotation(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_GeneratedCodeInfo.Annotation'(Bs,
							TrUserData),
		   TrUserData),
    dfp_read_field_def_GeneratedCodeInfo(Rest2, 0, 0,
					 cons(NewFValue, F1, TrUserData),
					 TrUserData).


skip_varint_GeneratedCodeInfo(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_GeneratedCodeInfo(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_GeneratedCodeInfo(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GeneratedCodeInfo(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_GeneratedCodeInfo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GeneratedCodeInfo(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GeneratedCodeInfo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GeneratedCodeInfo(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_GeneratedCodeInfo(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GeneratedCodeInfo(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_GeneratedCodeInfo(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_GeneratedCodeInfo(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_ServiceOptions(Bin, TrUserData) ->
    dfp_read_field_def_ServiceOptions(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id([], TrUserData), TrUserData).

dfp_read_field_def_ServiceOptions(<<136, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_ServiceOptions_deprecated(Rest, Z1, Z2, F1, F2,
				      TrUserData);
dfp_read_field_def_ServiceOptions(<<186, 62,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_ServiceOptions_uninterpreted_option(Rest, Z1,
						Z2, F1, F2, TrUserData);
dfp_read_field_def_ServiceOptions(<<>>, 0, 0, F1, F2,
				  TrUserData) ->
    #'ServiceOptions'{deprecated = F1,
		      uninterpreted_option = lists_reverse(F2, TrUserData)};
dfp_read_field_def_ServiceOptions(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_ServiceOptions(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_ServiceOptions(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServiceOptions(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_ServiceOptions(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      264 ->
	  d_field_ServiceOptions_deprecated(Rest, 0, 0, F1, F2,
					    TrUserData);
      7994 ->
	  d_field_ServiceOptions_uninterpreted_option(Rest, 0, 0,
						      F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServiceOptions(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_ServiceOptions(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_ServiceOptions(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_ServiceOptions(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_ServiceOptions(<<>>, 0, 0, F1, F2,
				 TrUserData) ->
    #'ServiceOptions'{deprecated = F1,
		      uninterpreted_option = lists_reverse(F2, TrUserData)}.

d_field_ServiceOptions_deprecated(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ServiceOptions_deprecated(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
d_field_ServiceOptions_deprecated(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_ServiceOptions(Rest, 0, 0, NewFValue,
				      F2, TrUserData).


d_field_ServiceOptions_uninterpreted_option(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ServiceOptions_uninterpreted_option(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
d_field_ServiceOptions_uninterpreted_option(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_ServiceOptions(Rest2, 0, 0, F1,
				      cons(NewFValue, F2, TrUserData),
				      TrUserData).


skip_varint_ServiceOptions(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ServiceOptions(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_ServiceOptions(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ServiceOptions(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_ServiceOptions(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServiceOptions(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_ServiceOptions(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServiceOptions(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_ServiceOptions(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_ServiceOptions(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_ServiceOptions(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_ServiceOptions(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_MethodDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_MethodDescriptorProto(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_MethodDescriptorProto(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    d_field_MethodDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, TrUserData);
dfp_read_field_def_MethodDescriptorProto(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    d_field_MethodDescriptorProto_input_type(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6,
					     TrUserData);
dfp_read_field_def_MethodDescriptorProto(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    d_field_MethodDescriptorProto_output_type(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6,
					      TrUserData);
dfp_read_field_def_MethodDescriptorProto(<<34,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    d_field_MethodDescriptorProto_options(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, TrUserData);
dfp_read_field_def_MethodDescriptorProto(<<40,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    d_field_MethodDescriptorProto_client_streaming(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData);
dfp_read_field_def_MethodDescriptorProto(<<48,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, F6,
					 TrUserData) ->
    d_field_MethodDescriptorProto_server_streaming(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   TrUserData);
dfp_read_field_def_MethodDescriptorProto(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, F6, _) ->
    #'MethodDescriptorProto'{name = F1, input_type = F2,
			     output_type = F3, options = F4,
			     client_streaming = F5, server_streaming = F6};
dfp_read_field_def_MethodDescriptorProto(Other, Z1, Z2,
					 F1, F2, F3, F4, F5, F6, TrUserData) ->
    dg_read_field_def_MethodDescriptorProto(Other, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, TrUserData).

dg_read_field_def_MethodDescriptorProto(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6,
					TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MethodDescriptorProto(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, TrUserData);
dg_read_field_def_MethodDescriptorProto(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6,
					TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MethodDescriptorProto_name(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, TrUserData);
      18 ->
	  d_field_MethodDescriptorProto_input_type(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6,
						   TrUserData);
      26 ->
	  d_field_MethodDescriptorProto_output_type(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6,
						    TrUserData);
      34 ->
	  d_field_MethodDescriptorProto_options(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, TrUserData);
      40 ->
	  d_field_MethodDescriptorProto_client_streaming(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, TrUserData);
      48 ->
	  d_field_MethodDescriptorProto_server_streaming(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MethodDescriptorProto(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, TrUserData);
	    1 ->
		skip_64_MethodDescriptorProto(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, TrUserData);
	    2 ->
		skip_length_delimited_MethodDescriptorProto(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    F6, TrUserData);
	    5 ->
		skip_32_MethodDescriptorProto(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6, TrUserData)
	  end
    end;
dg_read_field_def_MethodDescriptorProto(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6, _) ->
    #'MethodDescriptorProto'{name = F1, input_type = F2,
			     output_type = F3, options = F4,
			     client_streaming = F5, server_streaming = F6}.

d_field_MethodDescriptorProto_name(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_MethodDescriptorProto_name(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       TrUserData);
d_field_MethodDescriptorProto_name(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     NewFValue, F2, F3, F4, F5, F6,
					     TrUserData).


d_field_MethodDescriptorProto_input_type(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6,
					 TrUserData)
    when N < 57 ->
    d_field_MethodDescriptorProto_input_type(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, TrUserData);
d_field_MethodDescriptorProto_input_type(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5, F6,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, NewFValue, F3, F4, F5, F6,
					     TrUserData).


d_field_MethodDescriptorProto_output_type(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData)
    when N < 57 ->
    d_field_MethodDescriptorProto_output_type(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, TrUserData);
d_field_MethodDescriptorProto_output_type(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, _, F4, F5, F6,
					  TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, F2, NewFValue, F4, F5, F6,
					     TrUserData).


d_field_MethodDescriptorProto_options(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData)
    when N < 57 ->
    d_field_MethodDescriptorProto_options(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  TrUserData);
d_field_MethodDescriptorProto_options(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6,
				      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MethodOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, F2, F3,
					     if F4 == undefined -> NewFValue;
						true ->
						    merge_msg_MethodOptions(F4,
									    NewFValue,
									    TrUserData)
					     end,
					     F5, F6, TrUserData).


d_field_MethodDescriptorProto_client_streaming(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       TrUserData)
    when N < 57 ->
    d_field_MethodDescriptorProto_client_streaming(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, TrUserData);
d_field_MethodDescriptorProto_client_streaming(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, _, F6,
					       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MethodDescriptorProto(Rest, 0, 0, F1,
					     F2, F3, F4, NewFValue, F6,
					     TrUserData).


d_field_MethodDescriptorProto_server_streaming(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       TrUserData)
    when N < 57 ->
    d_field_MethodDescriptorProto_server_streaming(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, TrUserData);
d_field_MethodDescriptorProto_server_streaming(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, _,
					       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MethodDescriptorProto(Rest, 0, 0, F1,
					     F2, F3, F4, F5, NewFValue,
					     TrUserData).


skip_varint_MethodDescriptorProto(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_MethodDescriptorProto(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, TrUserData);
skip_varint_MethodDescriptorProto(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_MethodDescriptorProto(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6,
					     TrUserData).


skip_length_delimited_MethodDescriptorProto(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_MethodDescriptorProto(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, TrUserData);
skip_length_delimited_MethodDescriptorProto(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, F6,
					     TrUserData).


skip_32_MethodDescriptorProto(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_MethodDescriptorProto(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6,
					     TrUserData).


skip_64_MethodDescriptorProto(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_MethodDescriptorProto(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6,
					     TrUserData).


d_msg_ServiceDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_ServiceDescriptorProto(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id([], TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_ServiceDescriptorProto(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ServiceDescriptorProto_name(Rest, Z1, Z2, F1,
					F2, F3, TrUserData);
dfp_read_field_def_ServiceDescriptorProto(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ServiceDescriptorProto_method(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
dfp_read_field_def_ServiceDescriptorProto(<<26,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ServiceDescriptorProto_options(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData);
dfp_read_field_def_ServiceDescriptorProto(<<>>, 0, 0,
					  F1, F2, F3, TrUserData) ->
    #'ServiceDescriptorProto'{name = F1,
			      method = lists_reverse(F2, TrUserData),
			      options = F3};
dfp_read_field_def_ServiceDescriptorProto(Other, Z1, Z2,
					  F1, F2, F3, TrUserData) ->
    dg_read_field_def_ServiceDescriptorProto(Other, Z1, Z2,
					     F1, F2, F3, TrUserData).

dg_read_field_def_ServiceDescriptorProto(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServiceDescriptorProto(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
dg_read_field_def_ServiceDescriptorProto(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServiceDescriptorProto_name(Rest, 0, 0, F1, F2,
					      F3, TrUserData);
      18 ->
	  d_field_ServiceDescriptorProto_method(Rest, 0, 0, F1,
						F2, F3, TrUserData);
      26 ->
	  d_field_ServiceDescriptorProto_options(Rest, 0, 0, F1,
						 F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServiceDescriptorProto(Rest, 0, 0, F1, F2,
						   F3, TrUserData);
	    1 ->
		skip_64_ServiceDescriptorProto(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    2 ->
		skip_length_delimited_ServiceDescriptorProto(Rest, 0, 0,
							     F1, F2, F3,
							     TrUserData);
	    5 ->
		skip_32_ServiceDescriptorProto(Rest, 0, 0, F1, F2, F3,
					       TrUserData)
	  end
    end;
dg_read_field_def_ServiceDescriptorProto(<<>>, 0, 0, F1,
					 F2, F3, TrUserData) ->
    #'ServiceDescriptorProto'{name = F1,
			      method = lists_reverse(F2, TrUserData),
			      options = F3}.

d_field_ServiceDescriptorProto_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ServiceDescriptorProto_name(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_ServiceDescriptorProto_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      NewFValue, F2, F3, TrUserData).


d_field_ServiceDescriptorProto_method(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ServiceDescriptorProto_method(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
d_field_ServiceDescriptorProto_method(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MethodDescriptorProto(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      F1,
					      cons(NewFValue, F2, TrUserData),
					      F3, TrUserData).


d_field_ServiceDescriptorProto_options(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ServiceDescriptorProto_options(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
d_field_ServiceDescriptorProto_options(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ServiceOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      F1, F2,
					      if F3 == undefined -> NewFValue;
						 true ->
						     merge_msg_ServiceOptions(F3,
									      NewFValue,
									      TrUserData)
					      end,
					      TrUserData).


skip_varint_ServiceDescriptorProto(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ServiceDescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData);
skip_varint_ServiceDescriptorProto(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ServiceDescriptorProto(Rest, Z1, Z2,
					      F1, F2, F3, TrUserData).


skip_length_delimited_ServiceDescriptorProto(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServiceDescriptorProto(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, TrUserData);
skip_length_delimited_ServiceDescriptorProto(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      F1, F2, F3, TrUserData).


skip_32_ServiceDescriptorProto(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ServiceDescriptorProto(Rest, Z1, Z2,
					      F1, F2, F3, TrUserData).


skip_64_ServiceDescriptorProto(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ServiceDescriptorProto(Rest, Z1, Z2,
					      F1, F2, F3, TrUserData).


d_msg_MessageOptions(Bin, TrUserData) ->
    dfp_read_field_def_MessageOptions(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id([], TrUserData), TrUserData).

dfp_read_field_def_MessageOptions(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_MessageOptions_message_set_wire_format(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5,
						   TrUserData);
dfp_read_field_def_MessageOptions(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_MessageOptions_no_standard_descriptor_accessor(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, TrUserData);
dfp_read_field_def_MessageOptions(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_MessageOptions_deprecated(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_MessageOptions(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_MessageOptions_map_entry(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_MessageOptions(<<186, 62,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_MessageOptions_uninterpreted_option(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData);
dfp_read_field_def_MessageOptions(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, TrUserData) ->
    #'MessageOptions'{message_set_wire_format = F1,
		      no_standard_descriptor_accessor = F2, deprecated = F3,
		      map_entry = F4,
		      uninterpreted_option = lists_reverse(F5, TrUserData)};
dfp_read_field_def_MessageOptions(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, TrUserData) ->
    dg_read_field_def_MessageOptions(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData).

dg_read_field_def_MessageOptions(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MessageOptions(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
dg_read_field_def_MessageOptions(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MessageOptions_message_set_wire_format(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 TrUserData);
      16 ->
	  d_field_MessageOptions_no_standard_descriptor_accessor(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5,
								 TrUserData);
      24 ->
	  d_field_MessageOptions_deprecated(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      56 ->
	  d_field_MessageOptions_map_entry(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      7994 ->
	  d_field_MessageOptions_uninterpreted_option(Rest, 0, 0,
						      F1, F2, F3, F4, F5,
						      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MessageOptions(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData);
	    1 ->
		skip_64_MessageOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData);
	    2 ->
		skip_length_delimited_MessageOptions(Rest, 0, 0, F1, F2,
						     F3, F4, F5, TrUserData);
	    5 ->
		skip_32_MessageOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData)
	  end
    end;
dg_read_field_def_MessageOptions(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, TrUserData) ->
    #'MessageOptions'{message_set_wire_format = F1,
		      no_standard_descriptor_accessor = F2, deprecated = F3,
		      map_entry = F4,
		      uninterpreted_option = lists_reverse(F5, TrUserData)}.

d_field_MessageOptions_message_set_wire_format(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5,
					       TrUserData)
    when N < 57 ->
    d_field_MessageOptions_message_set_wire_format(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, TrUserData);
d_field_MessageOptions_message_set_wire_format(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2, F3, F4, F5,
					       TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MessageOptions(Rest, 0, 0, NewFValue,
				      F2, F3, F4, F5, TrUserData).


d_field_MessageOptions_no_standard_descriptor_accessor(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, TrUserData)
    when N < 57 ->
    d_field_MessageOptions_no_standard_descriptor_accessor(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   TrUserData);
d_field_MessageOptions_no_standard_descriptor_accessor(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, _, F3, F4,
						       F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MessageOptions(Rest, 0, 0, F1,
				      NewFValue, F3, F4, F5, TrUserData).


d_field_MessageOptions_deprecated(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_MessageOptions_deprecated(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_MessageOptions_deprecated(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MessageOptions(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, TrUserData).


d_field_MessageOptions_map_entry(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_MessageOptions_map_entry(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_MessageOptions_map_entry(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MessageOptions(Rest, 0, 0, F1, F2,
				      F3, NewFValue, F5, TrUserData).


d_field_MessageOptions_uninterpreted_option(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 57 ->
    d_field_MessageOptions_uninterpreted_option(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
d_field_MessageOptions_uninterpreted_option(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_MessageOptions(Rest2, 0, 0, F1, F2,
				      F3, F4, cons(NewFValue, F5, TrUserData),
				      TrUserData).


skip_varint_MessageOptions(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_MessageOptions(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
skip_varint_MessageOptions(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_MessageOptions(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_length_delimited_MessageOptions(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_MessageOptions(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
skip_length_delimited_MessageOptions(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MessageOptions(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, TrUserData).


skip_32_MessageOptions(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_MessageOptions(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


skip_64_MessageOptions(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_MessageOptions(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData).


d_msg_EnumValueDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_EnumValueDescriptorProto(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_EnumValueDescriptorProto(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumValueDescriptorProto_name(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
dfp_read_field_def_EnumValueDescriptorProto(<<16,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumValueDescriptorProto_number(Rest, Z1, Z2,
					    F1, F2, F3, TrUserData);
dfp_read_field_def_EnumValueDescriptorProto(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumValueDescriptorProto_options(Rest, Z1, Z2,
					     F1, F2, F3, TrUserData);
dfp_read_field_def_EnumValueDescriptorProto(<<>>, 0, 0,
					    F1, F2, F3, _) ->
    #'EnumValueDescriptorProto'{name = F1, number = F2,
				options = F3};
dfp_read_field_def_EnumValueDescriptorProto(Other, Z1,
					    Z2, F1, F2, F3, TrUserData) ->
    dg_read_field_def_EnumValueDescriptorProto(Other, Z1,
					       Z2, F1, F2, F3, TrUserData).

dg_read_field_def_EnumValueDescriptorProto(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnumValueDescriptorProto(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3,
					       TrUserData);
dg_read_field_def_EnumValueDescriptorProto(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnumValueDescriptorProto_name(Rest, 0, 0, F1,
						F2, F3, TrUserData);
      16 ->
	  d_field_EnumValueDescriptorProto_number(Rest, 0, 0, F1,
						  F2, F3, TrUserData);
      26 ->
	  d_field_EnumValueDescriptorProto_options(Rest, 0, 0, F1,
						   F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnumValueDescriptorProto(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    1 ->
		skip_64_EnumValueDescriptorProto(Rest, 0, 0, F1, F2, F3,
						 TrUserData);
	    2 ->
		skip_length_delimited_EnumValueDescriptorProto(Rest, 0,
							       0, F1, F2, F3,
							       TrUserData);
	    5 ->
		skip_32_EnumValueDescriptorProto(Rest, 0, 0, F1, F2, F3,
						 TrUserData)
	  end
    end;
dg_read_field_def_EnumValueDescriptorProto(<<>>, 0, 0,
					   F1, F2, F3, _) ->
    #'EnumValueDescriptorProto'{name = F1, number = F2,
				options = F3}.

d_field_EnumValueDescriptorProto_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumValueDescriptorProto_name(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
d_field_EnumValueDescriptorProto_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnumValueDescriptorProto(Rest2, 0, 0,
						NewFValue, F2, F3, TrUserData).


d_field_EnumValueDescriptorProto_number(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumValueDescriptorProto_number(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3,
					    TrUserData);
d_field_EnumValueDescriptorProto_number(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_EnumValueDescriptorProto(Rest, 0, 0,
						F1, NewFValue, F3, TrUserData).


d_field_EnumValueDescriptorProto_options(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumValueDescriptorProto_options(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
d_field_EnumValueDescriptorProto_options(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EnumValueOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_EnumValueDescriptorProto(Rest2, 0, 0,
						F1, F2,
						if F3 == undefined -> NewFValue;
						   true ->
						       merge_msg_EnumValueOptions(F3,
										  NewFValue,
										  TrUserData)
						end,
						TrUserData).


skip_varint_EnumValueDescriptorProto(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_EnumValueDescriptorProto(Rest, Z1, Z2, F1,
					 F2, F3, TrUserData);
skip_varint_EnumValueDescriptorProto(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumValueDescriptorProto(Rest, Z1,
						Z2, F1, F2, F3, TrUserData).


skip_length_delimited_EnumValueDescriptorProto(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnumValueDescriptorProto(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, TrUserData);
skip_length_delimited_EnumValueDescriptorProto(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumValueDescriptorProto(Rest2, 0, 0,
						F1, F2, F3, TrUserData).


skip_32_EnumValueDescriptorProto(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumValueDescriptorProto(Rest, Z1,
						Z2, F1, F2, F3, TrUserData).


skip_64_EnumValueDescriptorProto(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumValueDescriptorProto(Rest, Z1,
						Z2, F1, F2, F3, TrUserData).


d_msg_EnumDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_EnumDescriptorProto(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id([], TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_EnumDescriptorProto(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
dfp_read_field_def_EnumDescriptorProto(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumDescriptorProto_value(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_EnumDescriptorProto(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_EnumDescriptorProto_options(Rest, Z1, Z2, F1,
					F2, F3, TrUserData);
dfp_read_field_def_EnumDescriptorProto(<<>>, 0, 0, F1,
				       F2, F3, TrUserData) ->
    #'EnumDescriptorProto'{name = F1,
			   value = lists_reverse(F2, TrUserData), options = F3};
dfp_read_field_def_EnumDescriptorProto(Other, Z1, Z2,
				       F1, F2, F3, TrUserData) ->
    dg_read_field_def_EnumDescriptorProto(Other, Z1, Z2, F1,
					  F2, F3, TrUserData).

dg_read_field_def_EnumDescriptorProto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnumDescriptorProto(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
dg_read_field_def_EnumDescriptorProto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnumDescriptorProto_name(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
      18 ->
	  d_field_EnumDescriptorProto_value(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      26 ->
	  d_field_EnumDescriptorProto_options(Rest, 0, 0, F1, F2,
					      F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnumDescriptorProto(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    1 ->
		skip_64_EnumDescriptorProto(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    2 ->
		skip_length_delimited_EnumDescriptorProto(Rest, 0, 0,
							  F1, F2, F3,
							  TrUserData);
	    5 ->
		skip_32_EnumDescriptorProto(Rest, 0, 0, F1, F2, F3,
					    TrUserData)
	  end
    end;
dg_read_field_def_EnumDescriptorProto(<<>>, 0, 0, F1,
				      F2, F3, TrUserData) ->
    #'EnumDescriptorProto'{name = F1,
			   value = lists_reverse(F2, TrUserData), options = F3}.

d_field_EnumDescriptorProto_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumDescriptorProto_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnumDescriptorProto_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0,
					   NewFValue, F2, F3, TrUserData).


d_field_EnumDescriptorProto_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumDescriptorProto_value(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnumDescriptorProto_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EnumValueDescriptorProto(Bs,
						  TrUserData),
		   TrUserData),
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0, F1,
					   cons(NewFValue, F2, TrUserData), F3,
					   TrUserData).


d_field_EnumDescriptorProto_options(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnumDescriptorProto_options(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnumDescriptorProto_options(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EnumOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0, F1,
					   F2,
					   if F3 == undefined -> NewFValue;
					      true ->
						  merge_msg_EnumOptions(F3,
									NewFValue,
									TrUserData)
					   end,
					   TrUserData).


skip_varint_EnumDescriptorProto(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_EnumDescriptorProto(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
skip_varint_EnumDescriptorProto(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


skip_length_delimited_EnumDescriptorProto(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnumDescriptorProto(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3,
					      TrUserData);
skip_length_delimited_EnumDescriptorProto(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, TrUserData).


skip_32_EnumDescriptorProto(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


skip_64_EnumDescriptorProto(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnumDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, TrUserData).


d_msg_FieldOptions(Bin, TrUserData) ->
    dfp_read_field_def_FieldOptions(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id([], TrUserData), TrUserData).

dfp_read_field_def_FieldOptions(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_FieldOptions_ctype(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, TrUserData);
dfp_read_field_def_FieldOptions(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_FieldOptions_packed(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_FieldOptions(<<48, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_FieldOptions_jstype(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, TrUserData);
dfp_read_field_def_FieldOptions(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_FieldOptions_lazy(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_FieldOptions(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_FieldOptions_deprecated(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData);
dfp_read_field_def_FieldOptions(<<80, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    d_field_FieldOptions_weak(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, TrUserData);
dfp_read_field_def_FieldOptions(<<186, 62,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
				TrUserData) ->
    d_field_FieldOptions_uninterpreted_option(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7,
					      TrUserData);
dfp_read_field_def_FieldOptions(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, TrUserData) ->
    #'FieldOptions'{ctype = F1, packed = F2, jstype = F3,
		    lazy = F4, deprecated = F5, weak = F6,
		    uninterpreted_option = lists_reverse(F7, TrUserData)};
dfp_read_field_def_FieldOptions(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, TrUserData) ->
    dg_read_field_def_FieldOptions(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, TrUserData).

dg_read_field_def_FieldOptions(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FieldOptions(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData);
dg_read_field_def_FieldOptions(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_FieldOptions_ctype(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, TrUserData);
      16 ->
	  d_field_FieldOptions_packed(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      48 ->
	  d_field_FieldOptions_jstype(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, TrUserData);
      40 ->
	  d_field_FieldOptions_lazy(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      24 ->
	  d_field_FieldOptions_deprecated(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, TrUserData);
      80 ->
	  d_field_FieldOptions_weak(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, TrUserData);
      7994 ->
	  d_field_FieldOptions_uninterpreted_option(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FieldOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, TrUserData);
	    1 ->
		skip_64_FieldOptions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData);
	    2 ->
		skip_length_delimited_FieldOptions(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7,
						   TrUserData);
	    5 ->
		skip_32_FieldOptions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, TrUserData)
	  end
    end;
dg_read_field_def_FieldOptions(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, TrUserData) ->
    #'FieldOptions'{ctype = F1, packed = F2, jstype = F3,
		    lazy = F4, deprecated = F5, weak = F6,
		    uninterpreted_option = lists_reverse(F7, TrUserData)}.

d_field_FieldOptions_ctype(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_FieldOptions_ctype(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_FieldOptions_ctype(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6, F7, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldOptions.CType'(Tmp),
    dfp_read_field_def_FieldOptions(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7, TrUserData).


d_field_FieldOptions_packed(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_FieldOptions_packed(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_FieldOptions_packed(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6, F7, TrUserData).


d_field_FieldOptions_jstype(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_FieldOptions_jstype(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_FieldOptions_jstype(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, F4, F5, F6, F7, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldOptions.JSType'(Tmp),
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6, F7, TrUserData).


d_field_FieldOptions_lazy(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_FieldOptions_lazy(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_FieldOptions_lazy(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, F5, F6, F7, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6, F7, TrUserData).


d_field_FieldOptions_deprecated(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_FieldOptions_deprecated(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    TrUserData);
d_field_FieldOptions_deprecated(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, _, F6, F7,
				TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7, TrUserData).


d_field_FieldOptions_weak(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, TrUserData)
    when N < 57 ->
    d_field_FieldOptions_weak(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, TrUserData);
d_field_FieldOptions_weak(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, _, F7, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, TrUserData).


d_field_FieldOptions_uninterpreted_option(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  TrUserData)
    when N < 57 ->
    d_field_FieldOptions_uninterpreted_option(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, TrUserData);
d_field_FieldOptions_uninterpreted_option(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_UninterpretedOption(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_FieldOptions(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, cons(NewFValue, F7, TrUserData),
				    TrUserData).


skip_varint_FieldOptions(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    skip_varint_FieldOptions(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, TrUserData);
skip_varint_FieldOptions(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_FieldOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


skip_length_delimited_FieldOptions(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData)
    when N < 57 ->
    skip_length_delimited_FieldOptions(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, TrUserData);
skip_length_delimited_FieldOptions(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FieldOptions(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, TrUserData).


skip_32_FieldOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_FieldOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


skip_64_FieldOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, TrUserData) ->
    dfp_read_field_def_FieldOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, TrUserData).


d_msg_FieldDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_FieldDescriptorProto(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_FieldDescriptorProto(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<24,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_number(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<32,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_label(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<40,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_type(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<50,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_type_name(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_extendee(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<58,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_default_value(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<72,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_oneof_index(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<82,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_json_name(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<66,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    d_field_FieldDescriptorProto_options(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 TrUserData);
dfp_read_field_def_FieldDescriptorProto(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					_) ->
    #'FieldDescriptorProto'{name = F1, number = F2,
			    label = F3, type = F4, type_name = F5,
			    extendee = F6, default_value = F7, oneof_index = F8,
			    json_name = F9, options = F10};
dfp_read_field_def_FieldDescriptorProto(Other, Z1, Z2,
					F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
					TrUserData) ->
    dg_read_field_def_FieldDescriptorProto(Other, Z1, Z2,
					   F1, F2, F3, F4, F5, F6, F7, F8, F9,
					   F10, TrUserData).

dg_read_field_def_FieldDescriptorProto(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FieldDescriptorProto(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, TrUserData);
dg_read_field_def_FieldDescriptorProto(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FieldDescriptorProto_name(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData);
      24 ->
	  d_field_FieldDescriptorProto_number(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      TrUserData);
      32 ->
	  d_field_FieldDescriptorProto_label(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     TrUserData);
      40 ->
	  d_field_FieldDescriptorProto_type(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData);
      50 ->
	  d_field_FieldDescriptorProto_type_name(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData);
      18 ->
	  d_field_FieldDescriptorProto_extendee(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, TrUserData);
      58 ->
	  d_field_FieldDescriptorProto_default_value(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, TrUserData);
      72 ->
	  d_field_FieldDescriptorProto_oneof_index(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, TrUserData);
      82 ->
	  d_field_FieldDescriptorProto_json_name(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData);
      66 ->
	  d_field_FieldDescriptorProto_options(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FieldDescriptorProto(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10,
						 TrUserData);
	    1 ->
		skip_64_FieldDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8, F9, F10,
					     TrUserData);
	    2 ->
		skip_length_delimited_FieldDescriptorProto(Rest, 0, 0,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   TrUserData);
	    5 ->
		skip_32_FieldDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8, F9, F10,
					     TrUserData)
	  end
    end;
dg_read_field_def_FieldDescriptorProto(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       _) ->
    #'FieldDescriptorProto'{name = F1, number = F2,
			    label = F3, type = F4, type_name = F5,
			    extendee = F6, default_value = F7, oneof_index = F8,
			    json_name = F9, options = F10}.

d_field_FieldDescriptorProto_name(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_name(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_name(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0,
					    NewFValue, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, TrUserData).


d_field_FieldDescriptorProto_number(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_number(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_number(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    NewFValue, F3, F4, F5, F6, F7, F8,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_label(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_label(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_label(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldDescriptorProto.Label'(Tmp),
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    F2, NewFValue, F4, F5, F6, F7, F8,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_type(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldDescriptorProto.Type'(Tmp),
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    F2, F3, NewFValue, F5, F6, F7, F8,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_type_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_type_name(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_type_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, _, F6, F7, F8,
				       F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, NewFValue, F6, F7, F8,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_extendee(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_extendee(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_extendee(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				      F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, NewFValue, F7, F8,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_default_value(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_default_value(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10,
					       TrUserData);
d_field_FieldDescriptorProto_default_value(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, _,
					   F8, F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, NewFValue, F8,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_oneof_index(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_oneof_index(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_oneof_index(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
					 F9, F10, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    F2, F3, F4, F5, F6, F7, NewFValue,
					    F9, F10, TrUserData).


d_field_FieldDescriptorProto_json_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_json_name(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_json_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       _, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, F7, F8,
					    NewFValue, F10, TrUserData).


d_field_FieldDescriptorProto_options(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData)
    when N < 57 ->
    d_field_FieldDescriptorProto_options(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, TrUserData);
d_field_FieldDescriptorProto_options(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_FieldOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, F7, F8, F9,
					    if F10 == undefined -> NewFValue;
					       true ->
						   merge_msg_FieldOptions(F10,
									  NewFValue,
									  TrUserData)
					    end,
					    TrUserData).


skip_varint_FieldDescriptorProto(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    skip_varint_FieldDescriptorProto(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData);
skip_varint_FieldDescriptorProto(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    dfp_read_field_def_FieldDescriptorProto(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, TrUserData).


skip_length_delimited_FieldDescriptorProto(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, TrUserData)
    when N < 57 ->
    skip_length_delimited_FieldDescriptorProto(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10,
					       TrUserData);
skip_length_delimited_FieldDescriptorProto(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData).


skip_32_FieldDescriptorProto(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    dfp_read_field_def_FieldDescriptorProto(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, TrUserData).


skip_64_FieldDescriptorProto(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    dfp_read_field_def_FieldDescriptorProto(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, TrUserData).


d_msg_DescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_DescriptorProto(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id([], TrUserData), id([], TrUserData),
				       id([], TrUserData), id([], TrUserData),
				       id([], TrUserData), id([], TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData), id([], TrUserData),
				       TrUserData).

dfp_read_field_def_DescriptorProto(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_name(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_DescriptorProto(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_field(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_DescriptorProto(<<50, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_extension(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData);
dfp_read_field_def_DescriptorProto(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_nested_type(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
dfp_read_field_def_DescriptorProto(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_enum_type(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData);
dfp_read_field_def_DescriptorProto(<<42, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_extension_range(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, TrUserData);
dfp_read_field_def_DescriptorProto(<<66, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_oneof_decl(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData);
dfp_read_field_def_DescriptorProto(<<58, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_options(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10,
				    TrUserData);
dfp_read_field_def_DescriptorProto(<<74, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_reserved_range(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
dfp_read_field_def_DescriptorProto(<<82, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    d_field_DescriptorProto_reserved_name(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  TrUserData);
dfp_read_field_def_DescriptorProto(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10,
				   TrUserData) ->
    #'DescriptorProto'{name = F1,
		       field = lists_reverse(F2, TrUserData),
		       extension = lists_reverse(F3, TrUserData),
		       nested_type = lists_reverse(F4, TrUserData),
		       enum_type = lists_reverse(F5, TrUserData),
		       extension_range = lists_reverse(F6, TrUserData),
		       oneof_decl = lists_reverse(F7, TrUserData),
		       options = F8,
		       reserved_range = lists_reverse(F9, TrUserData),
		       reserved_name = lists_reverse(F10, TrUserData)};
dfp_read_field_def_DescriptorProto(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10,
				   TrUserData) ->
    dg_read_field_def_DescriptorProto(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData).

dg_read_field_def_DescriptorProto(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DescriptorProto(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
dg_read_field_def_DescriptorProto(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DescriptorProto_name(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, TrUserData);
      18 ->
	  d_field_DescriptorProto_field(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10,
					TrUserData);
      50 ->
	  d_field_DescriptorProto_extension(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData);
      26 ->
	  d_field_DescriptorProto_nested_type(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      TrUserData);
      34 ->
	  d_field_DescriptorProto_enum_type(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData);
      42 ->
	  d_field_DescriptorProto_extension_range(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, TrUserData);
      66 ->
	  d_field_DescriptorProto_oneof_decl(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     TrUserData);
      58 ->
	  d_field_DescriptorProto_options(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10,
					  TrUserData);
      74 ->
	  d_field_DescriptorProto_reserved_range(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData);
      82 ->
	  d_field_DescriptorProto_reserved_name(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10,
					    TrUserData);
	    1 ->
		skip_64_DescriptorProto(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, TrUserData);
	    2 ->
		skip_length_delimited_DescriptorProto(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, TrUserData);
	    5 ->
		skip_32_DescriptorProto(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, TrUserData)
	  end
    end;
dg_read_field_def_DescriptorProto(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10,
				  TrUserData) ->
    #'DescriptorProto'{name = F1,
		       field = lists_reverse(F2, TrUserData),
		       extension = lists_reverse(F3, TrUserData),
		       nested_type = lists_reverse(F4, TrUserData),
		       enum_type = lists_reverse(F5, TrUserData),
		       extension_range = lists_reverse(F6, TrUserData),
		       oneof_decl = lists_reverse(F7, TrUserData),
		       options = F8,
		       reserved_range = lists_reverse(F9, TrUserData),
		       reserved_name = lists_reverse(F10, TrUserData)}.

d_field_DescriptorProto_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_name(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 TrUserData);
d_field_DescriptorProto_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData).


d_field_DescriptorProto_field(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_field(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, TrUserData);
d_field_DescriptorProto_field(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_FieldDescriptorProto(Bs,
					      TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1,
				       cons(NewFValue, F2, TrUserData), F3, F4,
				       F5, F6, F7, F8, F9, F10, TrUserData).


d_field_DescriptorProto_extension(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_extension(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
d_field_DescriptorProto_extension(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_FieldDescriptorProto(Bs,
					      TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       cons(NewFValue, F3, TrUserData), F4, F5,
				       F6, F7, F8, F9, F10, TrUserData).


d_field_DescriptorProto_nested_type(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_nested_type(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, TrUserData);
d_field_DescriptorProto_nested_type(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_DescriptorProto(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, cons(NewFValue, F4, TrUserData), F5,
				       F6, F7, F8, F9, F10, TrUserData).


d_field_DescriptorProto_enum_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_enum_type(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
d_field_DescriptorProto_enum_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EnumDescriptorProto(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, cons(NewFValue, F5, TrUserData),
				       F6, F7, F8, F9, F10, TrUserData).


d_field_DescriptorProto_extension_range(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_extension_range(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, TrUserData);
d_field_DescriptorProto_extension_range(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue =
	id('d_msg_DescriptorProto.ExtensionRange'(Bs,
						  TrUserData),
	   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5,
				       cons(NewFValue, F6, TrUserData), F7, F8,
				       F9, F10, TrUserData).


d_field_DescriptorProto_oneof_decl(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_oneof_decl(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, TrUserData);
d_field_DescriptorProto_oneof_decl(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_OneofDescriptorProto(Bs,
					      TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6,
				       cons(NewFValue, F7, TrUserData), F8, F9,
				       F10, TrUserData).


d_field_DescriptorProto_options(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_options(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, TrUserData);
d_field_DescriptorProto_options(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_MessageOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7,
				       if F8 == undefined -> NewFValue;
					  true ->
					      merge_msg_MessageOptions(F8,
								       NewFValue,
								       TrUserData)
				       end,
				       F9, F10, TrUserData).


d_field_DescriptorProto_reserved_range(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_reserved_range(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, TrUserData);
d_field_DescriptorProto_reserved_range(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_DescriptorProto.ReservedRange'(Bs,
							 TrUserData),
		   TrUserData),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8,
				       cons(NewFValue, F9, TrUserData), F10,
				       TrUserData).


d_field_DescriptorProto_reserved_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData)
    when N < 57 ->
    d_field_DescriptorProto_reserved_name(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, TrUserData);
d_field_DescriptorProto_reserved_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9,
				       cons(NewFValue, F10, TrUserData),
				       TrUserData).


skip_varint_DescriptorProto(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    TrUserData) ->
    skip_varint_DescriptorProto(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, TrUserData);
skip_varint_DescriptorProto(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    TrUserData) ->
    dfp_read_field_def_DescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData).


skip_length_delimited_DescriptorProto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData)
    when N < 57 ->
    skip_length_delimited_DescriptorProto(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, TrUserData);
skip_length_delimited_DescriptorProto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData).


skip_32_DescriptorProto(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_DescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData).


skip_64_DescriptorProto(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_DescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData).


'd_msg_SourceCodeInfo.Location'(Bin, TrUserData) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Bin, 0, 0,
						 id([], TrUserData),
						 id([], TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id([], TrUserData),
						 TrUserData).

'dfp_read_field_def_SourceCodeInfo.Location'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5,
					     TrUserData) ->
    'd_field_SourceCodeInfo.Location_path'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
'dfp_read_field_def_SourceCodeInfo.Location'(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5,
					     TrUserData) ->
    'd_field_SourceCodeInfo.Location_span'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
'dfp_read_field_def_SourceCodeInfo.Location'(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5,
					     TrUserData) ->
    'd_field_SourceCodeInfo.Location_leading_comments'(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, TrUserData);
'dfp_read_field_def_SourceCodeInfo.Location'(<<34,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5,
					     TrUserData) ->
    'd_field_SourceCodeInfo.Location_trailing_comments'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, TrUserData);
'dfp_read_field_def_SourceCodeInfo.Location'(<<50,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5,
					     TrUserData) ->
    'd_field_SourceCodeInfo.Location_leading_detached_comments'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5,
								TrUserData);
'dfp_read_field_def_SourceCodeInfo.Location'(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, TrUserData) ->
    #'SourceCodeInfo.Location'{path =
				   lists_reverse(F1, TrUserData),
			       span = lists_reverse(F2, TrUserData),
			       leading_comments = F3, trailing_comments = F4,
			       leading_detached_comments =
				   lists_reverse(F5, TrUserData)};
'dfp_read_field_def_SourceCodeInfo.Location'(Other, Z1,
					     Z2, F1, F2, F3, F4, F5,
					     TrUserData) ->
    'dg_read_field_def_SourceCodeInfo.Location'(Other, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData).

'dg_read_field_def_SourceCodeInfo.Location'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_SourceCodeInfo.Location'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
'dg_read_field_def_SourceCodeInfo.Location'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SourceCodeInfo.Location_path'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      18 ->
	  'd_field_SourceCodeInfo.Location_span'(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      26 ->
	  'd_field_SourceCodeInfo.Location_leading_comments'(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5,
							     TrUserData);
      34 ->
	  'd_field_SourceCodeInfo.Location_trailing_comments'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5,
							      TrUserData);
      50 ->
	  'd_field_SourceCodeInfo.Location_leading_detached_comments'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SourceCodeInfo.Location'(Rest, 0, 0, F1,
						      F2, F3, F4, F5,
						      TrUserData);
	    1 ->
		'skip_64_SourceCodeInfo.Location'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, TrUserData);
	    2 ->
		'skip_length_delimited_SourceCodeInfo.Location'(Rest, 0,
								0, F1, F2, F3,
								F4, F5,
								TrUserData);
	    5 ->
		'skip_32_SourceCodeInfo.Location'(Rest, 0, 0, F1, F2,
						  F3, F4, F5, TrUserData)
	  end
    end;
'dg_read_field_def_SourceCodeInfo.Location'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, TrUserData) ->
    #'SourceCodeInfo.Location'{path =
				   lists_reverse(F1, TrUserData),
			       span = lists_reverse(F2, TrUserData),
			       leading_comments = F3, trailing_comments = F4,
			       leading_detached_comments =
				   lists_reverse(F5, TrUserData)}.

'd_field_SourceCodeInfo.Location_path'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_path'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
'd_field_SourceCodeInfo.Location_path'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5,
				       TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_SourceCodeInfo.Location_path'(PackedBytes,
						      0, 0, F1),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, NewSeq, F2, F3, F4, F5,
						 TrUserData).


'd_packed_field_SourceCodeInfo.Location_path'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq)
    when N < 57 ->
    'd_packed_field_SourceCodeInfo.Location_path'(Rest,
						  N + 7, X bsl N + Acc, AccSeq);
'd_packed_field_SourceCodeInfo.Location_path'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'd_packed_field_SourceCodeInfo.Location_path'(Rest, 0,
						  0, [NewFValue | AccSeq]);
'd_packed_field_SourceCodeInfo.Location_path'(<<>>, 0,
					      0, AccSeq) ->
    AccSeq.


'd_field_SourceCodeInfo.Location_span'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_span'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
'd_field_SourceCodeInfo.Location_span'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5,
				       TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_SourceCodeInfo.Location_span'(PackedBytes,
						      0, 0, F2),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, NewSeq, F3, F4, F5,
						 TrUserData).


'd_packed_field_SourceCodeInfo.Location_span'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq)
    when N < 57 ->
    'd_packed_field_SourceCodeInfo.Location_span'(Rest,
						  N + 7, X bsl N + Acc, AccSeq);
'd_packed_field_SourceCodeInfo.Location_span'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'd_packed_field_SourceCodeInfo.Location_span'(Rest, 0,
						  0, [NewFValue | AccSeq]);
'd_packed_field_SourceCodeInfo.Location_span'(<<>>, 0,
					      0, AccSeq) ->
    AccSeq.


'd_field_SourceCodeInfo.Location_leading_comments'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   TrUserData)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_leading_comments'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5,
						       TrUserData);
'd_field_SourceCodeInfo.Location_leading_comments'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, _, F4, F5,
						   TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, F2, NewFValue, F4, F5,
						 TrUserData).


'd_field_SourceCodeInfo.Location_trailing_comments'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    TrUserData)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_trailing_comments'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5,
							TrUserData);
'd_field_SourceCodeInfo.Location_trailing_comments'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, _, F5,
						    TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, F2, F3, NewFValue, F5,
						 TrUserData).


'd_field_SourceCodeInfo.Location_leading_detached_comments'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, TrUserData)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_leading_detached_comments'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3, F4,
								F5, TrUserData);
'd_field_SourceCodeInfo.Location_leading_detached_comments'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5,
							    TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, F2, F3, F4,
						 cons(NewFValue, F5,
						      TrUserData),
						 TrUserData).


'skip_varint_SourceCodeInfo.Location'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    'skip_varint_SourceCodeInfo.Location'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData);
'skip_varint_SourceCodeInfo.Location'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5,
						 TrUserData).


'skip_length_delimited_SourceCodeInfo.Location'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5,
						TrUserData)
    when N < 57 ->
    'skip_length_delimited_SourceCodeInfo.Location'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, TrUserData);
'skip_length_delimited_SourceCodeInfo.Location'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, F2, F3, F4, F5,
						 TrUserData).


'skip_32_SourceCodeInfo.Location'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5,
						 TrUserData).


'skip_64_SourceCodeInfo.Location'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5,
						 TrUserData).


d_msg_SourceCodeInfo(Bin, TrUserData) ->
    dfp_read_field_def_SourceCodeInfo(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_SourceCodeInfo(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_SourceCodeInfo_location(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_SourceCodeInfo(<<>>, 0, 0, F1,
				  TrUserData) ->
    #'SourceCodeInfo'{location =
			  lists_reverse(F1, TrUserData)};
dfp_read_field_def_SourceCodeInfo(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_SourceCodeInfo(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_SourceCodeInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SourceCodeInfo(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_SourceCodeInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SourceCodeInfo_location(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SourceCodeInfo(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_SourceCodeInfo(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_SourceCodeInfo(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_SourceCodeInfo(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_SourceCodeInfo(<<>>, 0, 0, F1,
				 TrUserData) ->
    #'SourceCodeInfo'{location =
			  lists_reverse(F1, TrUserData)}.

d_field_SourceCodeInfo_location(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_SourceCodeInfo_location(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_SourceCodeInfo_location(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_SourceCodeInfo.Location'(Bs,
						   TrUserData),
		   TrUserData),
    dfp_read_field_def_SourceCodeInfo(Rest2, 0, 0,
				      cons(NewFValue, F1, TrUserData),
				      TrUserData).


skip_varint_SourceCodeInfo(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_SourceCodeInfo(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_SourceCodeInfo(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_SourceCodeInfo(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_SourceCodeInfo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SourceCodeInfo(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_SourceCodeInfo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SourceCodeInfo(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_SourceCodeInfo(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_SourceCodeInfo(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_SourceCodeInfo(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_SourceCodeInfo(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_FileDescriptorProto(Bin, TrUserData) ->
    dfp_read_field_def_FileDescriptorProto(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id([], TrUserData),
					   id([], TrUserData),
					   id([], TrUserData),
					   id([], TrUserData),
					   id([], TrUserData),
					   id([], TrUserData),
					   id([], TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_FileDescriptorProto(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     TrUserData);
dfp_read_field_def_FileDescriptorProto(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_package(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_dependency(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<80,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_public_dependency(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  TrUserData);
dfp_read_field_def_FileDescriptorProto(<<88,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_weak_dependency(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12,
						TrUserData);
dfp_read_field_def_FileDescriptorProto(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_message_type(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<42,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_enum_type(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<50,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_service(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_extension(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<66,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_options(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<74,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_source_code_info(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12,
						 TrUserData);
dfp_read_field_def_FileDescriptorProto(<<98,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    d_field_FileDescriptorProto_syntax(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, TrUserData);
dfp_read_field_def_FileDescriptorProto(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, TrUserData) ->
    #'FileDescriptorProto'{name = F1, package = F2,
			   dependency = lists_reverse(F3, TrUserData),
			   public_dependency = lists_reverse(F4, TrUserData),
			   weak_dependency = lists_reverse(F5, TrUserData),
			   message_type = lists_reverse(F6, TrUserData),
			   enum_type = lists_reverse(F7, TrUserData),
			   service = lists_reverse(F8, TrUserData),
			   extension = lists_reverse(F9, TrUserData),
			   options = F10, source_code_info = F11, syntax = F12};
dfp_read_field_def_FileDescriptorProto(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				       F11, F12, TrUserData) ->
    dg_read_field_def_FileDescriptorProto(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, TrUserData).

dg_read_field_def_FileDescriptorProto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FileDescriptorProto(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12,
					  TrUserData);
dg_read_field_def_FileDescriptorProto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FileDescriptorProto_name(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, TrUserData);
      18 ->
	  d_field_FileDescriptorProto_package(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, TrUserData);
      26 ->
	  d_field_FileDescriptorProto_dependency(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, TrUserData);
      80 ->
	  d_field_FileDescriptorProto_public_dependency(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, TrUserData);
      88 ->
	  d_field_FileDescriptorProto_weak_dependency(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      TrUserData);
      34 ->
	  d_field_FileDescriptorProto_message_type(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12,
						   TrUserData);
      42 ->
	  d_field_FileDescriptorProto_enum_type(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, TrUserData);
      50 ->
	  d_field_FileDescriptorProto_service(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, TrUserData);
      58 ->
	  d_field_FileDescriptorProto_extension(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, TrUserData);
      66 ->
	  d_field_FileDescriptorProto_options(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, TrUserData);
      74 ->
	  d_field_FileDescriptorProto_source_code_info(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, TrUserData);
      98 ->
	  d_field_FileDescriptorProto_syntax(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FileDescriptorProto(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9, F10,
						F11, F12, TrUserData);
	    1 ->
		skip_64_FileDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11, F12,
					    TrUserData);
	    2 ->
		skip_length_delimited_FileDescriptorProto(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, TrUserData);
	    5 ->
		skip_32_FileDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11, F12,
					    TrUserData)
	  end
    end;
dg_read_field_def_FileDescriptorProto(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, TrUserData) ->
    #'FileDescriptorProto'{name = F1, package = F2,
			   dependency = lists_reverse(F3, TrUserData),
			   public_dependency = lists_reverse(F4, TrUserData),
			   weak_dependency = lists_reverse(F5, TrUserData),
			   message_type = lists_reverse(F6, TrUserData),
			   enum_type = lists_reverse(F7, TrUserData),
			   service = lists_reverse(F8, TrUserData),
			   extension = lists_reverse(F9, TrUserData),
			   options = F10, source_code_info = F11, syntax = F12}.

d_field_FileDescriptorProto_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, TrUserData).


d_field_FileDescriptorProto_package(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_package(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_package(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7, F8,
					   F9, F10, F11, F12, TrUserData).


d_field_FileDescriptorProto_dependency(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_dependency(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12,
					   TrUserData);
d_field_FileDescriptorProto_dependency(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, cons(NewFValue, F3, TrUserData),
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, TrUserData).


d_field_FileDescriptorProto_public_dependency(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12,
					      TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_public_dependency(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_public_dependency(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12,
					      TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_FileDescriptorProto(Rest, 0, 0, F1,
					   F2, F3,
					   cons(NewFValue, F4, TrUserData), F5,
					   F6, F7, F8, F9, F10, F11, F12,
					   TrUserData).


d_field_FileDescriptorProto_weak_dependency(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_weak_dependency(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, TrUserData);
d_field_FileDescriptorProto_weak_dependency(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12,
					    TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_FileDescriptorProto(Rest, 0, 0, F1,
					   F2, F3, F4,
					   cons(NewFValue, F5, TrUserData), F6,
					   F7, F8, F9, F10, F11, F12,
					   TrUserData).


d_field_FileDescriptorProto_message_type(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_message_type(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12,
					     TrUserData);
d_field_FileDescriptorProto_message_type(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_DescriptorProto(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5,
					   cons(NewFValue, F6, TrUserData), F7,
					   F8, F9, F10, F11, F12, TrUserData).


d_field_FileDescriptorProto_enum_type(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_enum_type(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12,
					  TrUserData);
d_field_FileDescriptorProto_enum_type(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_EnumDescriptorProto(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6,
					   cons(NewFValue, F7, TrUserData), F8,
					   F9, F10, F11, F12, TrUserData).


d_field_FileDescriptorProto_service(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_service(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_service(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ServiceDescriptorProto(Bs,
						TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7,
					   cons(NewFValue, F8, TrUserData), F9,
					   F10, F11, F12, TrUserData).


d_field_FileDescriptorProto_extension(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_extension(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12,
					  TrUserData);
d_field_FileDescriptorProto_extension(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_FieldDescriptorProto(Bs,
					      TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8,
					   cons(NewFValue, F9, TrUserData), F10,
					   F11, F12, TrUserData).


d_field_FileDescriptorProto_options(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_options(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_options(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_FileOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9,
					   if F10 == undefined -> NewFValue;
					      true ->
						  merge_msg_FileOptions(F10,
									NewFValue,
									TrUserData)
					   end,
					   F11, F12, TrUserData).


d_field_FileDescriptorProto_source_code_info(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_source_code_info(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_source_code_info(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12,
					     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_SourceCodeInfo(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   if F11 == undefined -> NewFValue;
					      true ->
						  merge_msg_SourceCodeInfo(F11,
									   NewFValue,
									   TrUserData)
					   end,
					   F12, TrUserData).


d_field_FileDescriptorProto_syntax(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorProto_syntax(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, TrUserData);
d_field_FileDescriptorProto_syntax(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, NewFValue, TrUserData).


skip_varint_FileDescriptorProto(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, TrUserData) ->
    skip_varint_FileDescriptorProto(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    TrUserData);
skip_varint_FileDescriptorProto(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, TrUserData) ->
    dfp_read_field_def_FileDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, TrUserData).


skip_length_delimited_FileDescriptorProto(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, TrUserData)
    when N < 57 ->
    skip_length_delimited_FileDescriptorProto(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      TrUserData);
skip_length_delimited_FileDescriptorProto(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, TrUserData).


skip_32_FileDescriptorProto(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, TrUserData) ->
    dfp_read_field_def_FileDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, TrUserData).


skip_64_FileDescriptorProto(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12, TrUserData) ->
    dfp_read_field_def_FileDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, TrUserData).


d_msg_FileDescriptorSet(Bin, TrUserData) ->
    dfp_read_field_def_FileDescriptorSet(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_FileDescriptorSet(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_FileDescriptorSet_file(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_FileDescriptorSet(<<>>, 0, 0, F1,
				     TrUserData) ->
    #'FileDescriptorSet'{file =
			     lists_reverse(F1, TrUserData)};
dfp_read_field_def_FileDescriptorSet(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_FileDescriptorSet(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_FileDescriptorSet(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FileDescriptorSet(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_FileDescriptorSet(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FileDescriptorSet_file(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FileDescriptorSet(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_FileDescriptorSet(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_FileDescriptorSet(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_FileDescriptorSet(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_FileDescriptorSet(<<>>, 0, 0, F1,
				    TrUserData) ->
    #'FileDescriptorSet'{file =
			     lists_reverse(F1, TrUserData)}.

d_field_FileDescriptorSet_file(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_FileDescriptorSet_file(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_FileDescriptorSet_file(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_FileDescriptorProto(Bs,
					     TrUserData),
		   TrUserData),
    dfp_read_field_def_FileDescriptorSet(Rest2, 0, 0,
					 cons(NewFValue, F1, TrUserData),
					 TrUserData).


skip_varint_FileDescriptorSet(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_FileDescriptorSet(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_FileDescriptorSet(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_FileDescriptorSet(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_FileDescriptorSet(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_FileDescriptorSet(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_FileDescriptorSet(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileDescriptorSet(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_FileDescriptorSet(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_FileDescriptorSet(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_FileDescriptorSet(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_FileDescriptorSet(Rest, Z1, Z2, F1,
					 TrUserData).




'd_enum_FieldDescriptorProto.Type'(1) -> 'TYPE_DOUBLE';
'd_enum_FieldDescriptorProto.Type'(2) -> 'TYPE_FLOAT';
'd_enum_FieldDescriptorProto.Type'(3) -> 'TYPE_INT64';
'd_enum_FieldDescriptorProto.Type'(4) -> 'TYPE_UINT64';
'd_enum_FieldDescriptorProto.Type'(5) -> 'TYPE_INT32';
'd_enum_FieldDescriptorProto.Type'(6) -> 'TYPE_FIXED64';
'd_enum_FieldDescriptorProto.Type'(7) -> 'TYPE_FIXED32';
'd_enum_FieldDescriptorProto.Type'(8) -> 'TYPE_BOOL';
'd_enum_FieldDescriptorProto.Type'(9) -> 'TYPE_STRING';
'd_enum_FieldDescriptorProto.Type'(10) -> 'TYPE_GROUP';
'd_enum_FieldDescriptorProto.Type'(11) ->
    'TYPE_MESSAGE';
'd_enum_FieldDescriptorProto.Type'(12) -> 'TYPE_BYTES';
'd_enum_FieldDescriptorProto.Type'(13) -> 'TYPE_UINT32';
'd_enum_FieldDescriptorProto.Type'(14) -> 'TYPE_ENUM';
'd_enum_FieldDescriptorProto.Type'(15) ->
    'TYPE_SFIXED32';
'd_enum_FieldDescriptorProto.Type'(16) ->
    'TYPE_SFIXED64';
'd_enum_FieldDescriptorProto.Type'(17) -> 'TYPE_SINT32';
'd_enum_FieldDescriptorProto.Type'(18) -> 'TYPE_SINT64';
'd_enum_FieldDescriptorProto.Type'(V) -> V.

'd_enum_FieldDescriptorProto.Label'(1) ->
    'LABEL_OPTIONAL';
'd_enum_FieldDescriptorProto.Label'(2) ->
    'LABEL_REQUIRED';
'd_enum_FieldDescriptorProto.Label'(3) ->
    'LABEL_REPEATED';
'd_enum_FieldDescriptorProto.Label'(V) -> V.

'd_enum_FileOptions.OptimizeMode'(1) -> 'SPEED';
'd_enum_FileOptions.OptimizeMode'(2) -> 'CODE_SIZE';
'd_enum_FileOptions.OptimizeMode'(3) -> 'LITE_RUNTIME';
'd_enum_FileOptions.OptimizeMode'(V) -> V.

'd_enum_FieldOptions.CType'(0) -> 'STRING';
'd_enum_FieldOptions.CType'(1) -> 'CORD';
'd_enum_FieldOptions.CType'(2) -> 'STRING_PIECE';
'd_enum_FieldOptions.CType'(V) -> V.

'd_enum_FieldOptions.JSType'(0) -> 'JS_NORMAL';
'd_enum_FieldOptions.JSType'(1) -> 'JS_STRING';
'd_enum_FieldOptions.JSType'(2) -> 'JS_NUMBER';
'd_enum_FieldOptions.JSType'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'OneofDescriptorProto'{} ->
	  merge_msg_OneofDescriptorProto(Prev, New, TrUserData);
      #'UninterpretedOption.NamePart'{} ->
	  'merge_msg_UninterpretedOption.NamePart'(Prev, New,
						   TrUserData);
      #'UninterpretedOption'{} ->
	  merge_msg_UninterpretedOption(Prev, New, TrUserData);
      #'DescriptorProto.ReservedRange'{} ->
	  'merge_msg_DescriptorProto.ReservedRange'(Prev, New,
						    TrUserData);
      #'DescriptorProto.ExtensionRange'{} ->
	  'merge_msg_DescriptorProto.ExtensionRange'(Prev, New,
						     TrUserData);
      #'FileOptions'{} ->
	  merge_msg_FileOptions(Prev, New, TrUserData);
      #'MethodOptions'{} ->
	  merge_msg_MethodOptions(Prev, New, TrUserData);
      #'EnumOptions'{} ->
	  merge_msg_EnumOptions(Prev, New, TrUserData);
      #'EnumValueOptions'{} ->
	  merge_msg_EnumValueOptions(Prev, New, TrUserData);
      #'GeneratedCodeInfo.Annotation'{} ->
	  'merge_msg_GeneratedCodeInfo.Annotation'(Prev, New,
						   TrUserData);
      #'GeneratedCodeInfo'{} ->
	  merge_msg_GeneratedCodeInfo(Prev, New, TrUserData);
      #'ServiceOptions'{} ->
	  merge_msg_ServiceOptions(Prev, New, TrUserData);
      #'MethodDescriptorProto'{} ->
	  merge_msg_MethodDescriptorProto(Prev, New, TrUserData);
      #'ServiceDescriptorProto'{} ->
	  merge_msg_ServiceDescriptorProto(Prev, New, TrUserData);
      #'MessageOptions'{} ->
	  merge_msg_MessageOptions(Prev, New, TrUserData);
      #'EnumValueDescriptorProto'{} ->
	  merge_msg_EnumValueDescriptorProto(Prev, New,
					     TrUserData);
      #'EnumDescriptorProto'{} ->
	  merge_msg_EnumDescriptorProto(Prev, New, TrUserData);
      #'FieldOptions'{} ->
	  merge_msg_FieldOptions(Prev, New, TrUserData);
      #'FieldDescriptorProto'{} ->
	  merge_msg_FieldDescriptorProto(Prev, New, TrUserData);
      #'DescriptorProto'{} ->
	  merge_msg_DescriptorProto(Prev, New, TrUserData);
      #'SourceCodeInfo.Location'{} ->
	  'merge_msg_SourceCodeInfo.Location'(Prev, New,
					      TrUserData);
      #'SourceCodeInfo'{} ->
	  merge_msg_SourceCodeInfo(Prev, New, TrUserData);
      #'FileDescriptorProto'{} ->
	  merge_msg_FileDescriptorProto(Prev, New, TrUserData);
      #'FileDescriptorSet'{} ->
	  merge_msg_FileDescriptorSet(Prev, New, TrUserData)
    end.

merge_msg_OneofDescriptorProto(#'OneofDescriptorProto'{name
							   = PFname},
			       #'OneofDescriptorProto'{name = NFname}, _) ->
    #'OneofDescriptorProto'{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end}.

'merge_msg_UninterpretedOption.NamePart'(#'UninterpretedOption.NamePart'{},
					 #'UninterpretedOption.NamePart'{name_part
									     =
									     NFname_part,
									 is_extension
									     =
									     NFis_extension},
					 _) ->
    #'UninterpretedOption.NamePart'{name_part = NFname_part,
				    is_extension = NFis_extension}.

merge_msg_UninterpretedOption(#'UninterpretedOption'{name
							 = PFname,
						     identifier_value =
							 PFidentifier_value,
						     positive_int_value =
							 PFpositive_int_value,
						     negative_int_value =
							 PFnegative_int_value,
						     double_value =
							 PFdouble_value,
						     string_value =
							 PFstring_value,
						     aggregate_value =
							 PFaggregate_value},
			      #'UninterpretedOption'{name = NFname,
						     identifier_value =
							 NFidentifier_value,
						     positive_int_value =
							 NFpositive_int_value,
						     negative_int_value =
							 NFnegative_int_value,
						     double_value =
							 NFdouble_value,
						     string_value =
							 NFstring_value,
						     aggregate_value =
							 NFaggregate_value},
			      TrUserData) ->
    #'UninterpretedOption'{name =
			       'erlang_++'(PFname, NFname, TrUserData),
			   identifier_value =
			       if NFidentifier_value =:= undefined ->
				      PFidentifier_value;
				  true -> NFidentifier_value
			       end,
			   positive_int_value =
			       if NFpositive_int_value =:= undefined ->
				      PFpositive_int_value;
				  true -> NFpositive_int_value
			       end,
			   negative_int_value =
			       if NFnegative_int_value =:= undefined ->
				      PFnegative_int_value;
				  true -> NFnegative_int_value
			       end,
			   double_value =
			       if NFdouble_value =:= undefined ->
				      PFdouble_value;
				  true -> NFdouble_value
			       end,
			   string_value =
			       if NFstring_value =:= undefined ->
				      PFstring_value;
				  true -> NFstring_value
			       end,
			   aggregate_value =
			       if NFaggregate_value =:= undefined ->
				      PFaggregate_value;
				  true -> NFaggregate_value
			       end}.

'merge_msg_DescriptorProto.ReservedRange'(#'DescriptorProto.ReservedRange'{start
									       =
									       PFstart,
									   'end'
									       =
									       PFend},
					  #'DescriptorProto.ReservedRange'{start
									       =
									       NFstart,
									   'end'
									       =
									       NFend},
					  _) ->
    #'DescriptorProto.ReservedRange'{start =
					 if NFstart =:= undefined -> PFstart;
					    true -> NFstart
					 end,
				     'end' =
					 if NFend =:= undefined -> PFend;
					    true -> NFend
					 end}.

'merge_msg_DescriptorProto.ExtensionRange'(#'DescriptorProto.ExtensionRange'{start
										 =
										 PFstart,
									     'end'
										 =
										 PFend},
					   #'DescriptorProto.ExtensionRange'{start
										 =
										 NFstart,
									     'end'
										 =
										 NFend},
					   _) ->
    #'DescriptorProto.ExtensionRange'{start =
					  if NFstart =:= undefined -> PFstart;
					     true -> NFstart
					  end,
				      'end' =
					  if NFend =:= undefined -> PFend;
					     true -> NFend
					  end}.

merge_msg_FileOptions(#'FileOptions'{java_package =
					 PFjava_package,
				     java_outer_classname =
					 PFjava_outer_classname,
				     java_multiple_files =
					 PFjava_multiple_files,
				     java_generate_equals_and_hash =
					 PFjava_generate_equals_and_hash,
				     java_string_check_utf8 =
					 PFjava_string_check_utf8,
				     optimize_for = PFoptimize_for,
				     go_package = PFgo_package,
				     cc_generic_services =
					 PFcc_generic_services,
				     java_generic_services =
					 PFjava_generic_services,
				     py_generic_services =
					 PFpy_generic_services,
				     deprecated = PFdeprecated,
				     cc_enable_arenas = PFcc_enable_arenas,
				     objc_class_prefix = PFobjc_class_prefix,
				     csharp_namespace = PFcsharp_namespace,
				     javanano_use_deprecated_package =
					 PFjavanano_use_deprecated_package,
				     uninterpreted_option =
					 PFuninterpreted_option},
		      #'FileOptions'{java_package = NFjava_package,
				     java_outer_classname =
					 NFjava_outer_classname,
				     java_multiple_files =
					 NFjava_multiple_files,
				     java_generate_equals_and_hash =
					 NFjava_generate_equals_and_hash,
				     java_string_check_utf8 =
					 NFjava_string_check_utf8,
				     optimize_for = NFoptimize_for,
				     go_package = NFgo_package,
				     cc_generic_services =
					 NFcc_generic_services,
				     java_generic_services =
					 NFjava_generic_services,
				     py_generic_services =
					 NFpy_generic_services,
				     deprecated = NFdeprecated,
				     cc_enable_arenas = NFcc_enable_arenas,
				     objc_class_prefix = NFobjc_class_prefix,
				     csharp_namespace = NFcsharp_namespace,
				     javanano_use_deprecated_package =
					 NFjavanano_use_deprecated_package,
				     uninterpreted_option =
					 NFuninterpreted_option},
		      TrUserData) ->
    #'FileOptions'{java_package =
		       if NFjava_package =:= undefined -> PFjava_package;
			  true -> NFjava_package
		       end,
		   java_outer_classname =
		       if NFjava_outer_classname =:= undefined ->
			      PFjava_outer_classname;
			  true -> NFjava_outer_classname
		       end,
		   java_multiple_files =
		       if NFjava_multiple_files =:= undefined ->
			      PFjava_multiple_files;
			  true -> NFjava_multiple_files
		       end,
		   java_generate_equals_and_hash =
		       if NFjava_generate_equals_and_hash =:= undefined ->
			      PFjava_generate_equals_and_hash;
			  true -> NFjava_generate_equals_and_hash
		       end,
		   java_string_check_utf8 =
		       if NFjava_string_check_utf8 =:= undefined ->
			      PFjava_string_check_utf8;
			  true -> NFjava_string_check_utf8
		       end,
		   optimize_for =
		       if NFoptimize_for =:= undefined -> PFoptimize_for;
			  true -> NFoptimize_for
		       end,
		   go_package =
		       if NFgo_package =:= undefined -> PFgo_package;
			  true -> NFgo_package
		       end,
		   cc_generic_services =
		       if NFcc_generic_services =:= undefined ->
			      PFcc_generic_services;
			  true -> NFcc_generic_services
		       end,
		   java_generic_services =
		       if NFjava_generic_services =:= undefined ->
			      PFjava_generic_services;
			  true -> NFjava_generic_services
		       end,
		   py_generic_services =
		       if NFpy_generic_services =:= undefined ->
			      PFpy_generic_services;
			  true -> NFpy_generic_services
		       end,
		   deprecated =
		       if NFdeprecated =:= undefined -> PFdeprecated;
			  true -> NFdeprecated
		       end,
		   cc_enable_arenas =
		       if NFcc_enable_arenas =:= undefined ->
			      PFcc_enable_arenas;
			  true -> NFcc_enable_arenas
		       end,
		   objc_class_prefix =
		       if NFobjc_class_prefix =:= undefined ->
			      PFobjc_class_prefix;
			  true -> NFobjc_class_prefix
		       end,
		   csharp_namespace =
		       if NFcsharp_namespace =:= undefined ->
			      PFcsharp_namespace;
			  true -> NFcsharp_namespace
		       end,
		   javanano_use_deprecated_package =
		       if NFjavanano_use_deprecated_package =:= undefined ->
			      PFjavanano_use_deprecated_package;
			  true -> NFjavanano_use_deprecated_package
		       end,
		   uninterpreted_option =
		       'erlang_++'(PFuninterpreted_option,
				   NFuninterpreted_option, TrUserData)}.

merge_msg_MethodOptions(#'MethodOptions'{deprecated =
					     PFdeprecated,
					 uninterpreted_option =
					     PFuninterpreted_option},
			#'MethodOptions'{deprecated = NFdeprecated,
					 uninterpreted_option =
					     NFuninterpreted_option},
			TrUserData) ->
    #'MethodOptions'{deprecated =
			 if NFdeprecated =:= undefined -> PFdeprecated;
			    true -> NFdeprecated
			 end,
		     uninterpreted_option =
			 'erlang_++'(PFuninterpreted_option,
				     NFuninterpreted_option, TrUserData)}.

merge_msg_EnumOptions(#'EnumOptions'{allow_alias =
					 PFallow_alias,
				     deprecated = PFdeprecated,
				     uninterpreted_option =
					 PFuninterpreted_option},
		      #'EnumOptions'{allow_alias = NFallow_alias,
				     deprecated = NFdeprecated,
				     uninterpreted_option =
					 NFuninterpreted_option},
		      TrUserData) ->
    #'EnumOptions'{allow_alias =
		       if NFallow_alias =:= undefined -> PFallow_alias;
			  true -> NFallow_alias
		       end,
		   deprecated =
		       if NFdeprecated =:= undefined -> PFdeprecated;
			  true -> NFdeprecated
		       end,
		   uninterpreted_option =
		       'erlang_++'(PFuninterpreted_option,
				   NFuninterpreted_option, TrUserData)}.

merge_msg_EnumValueOptions(#'EnumValueOptions'{deprecated
						   = PFdeprecated,
					       uninterpreted_option =
						   PFuninterpreted_option},
			   #'EnumValueOptions'{deprecated = NFdeprecated,
					       uninterpreted_option =
						   NFuninterpreted_option},
			   TrUserData) ->
    #'EnumValueOptions'{deprecated =
			    if NFdeprecated =:= undefined -> PFdeprecated;
			       true -> NFdeprecated
			    end,
			uninterpreted_option =
			    'erlang_++'(PFuninterpreted_option,
					NFuninterpreted_option, TrUserData)}.

'merge_msg_GeneratedCodeInfo.Annotation'(#'GeneratedCodeInfo.Annotation'{path
									     =
									     PFpath,
									 source_file
									     =
									     PFsource_file,
									 'begin'
									     =
									     PFbegin,
									 'end' =
									     PFend},
					 #'GeneratedCodeInfo.Annotation'{path =
									     NFpath,
									 source_file
									     =
									     NFsource_file,
									 'begin'
									     =
									     NFbegin,
									 'end' =
									     NFend},
					 TrUserData) ->
    #'GeneratedCodeInfo.Annotation'{path =
					'erlang_++'(PFpath, NFpath, TrUserData),
				    source_file =
					if NFsource_file =:= undefined ->
					       PFsource_file;
					   true -> NFsource_file
					end,
				    'begin' =
					if NFbegin =:= undefined -> PFbegin;
					   true -> NFbegin
					end,
				    'end' =
					if NFend =:= undefined -> PFend;
					   true -> NFend
					end}.

merge_msg_GeneratedCodeInfo(#'GeneratedCodeInfo'{annotation
						     = PFannotation},
			    #'GeneratedCodeInfo'{annotation = NFannotation},
			    TrUserData) ->
    #'GeneratedCodeInfo'{annotation =
			     'erlang_++'(PFannotation, NFannotation,
					 TrUserData)}.

merge_msg_ServiceOptions(#'ServiceOptions'{deprecated =
					       PFdeprecated,
					   uninterpreted_option =
					       PFuninterpreted_option},
			 #'ServiceOptions'{deprecated = NFdeprecated,
					   uninterpreted_option =
					       NFuninterpreted_option},
			 TrUserData) ->
    #'ServiceOptions'{deprecated =
			  if NFdeprecated =:= undefined -> PFdeprecated;
			     true -> NFdeprecated
			  end,
		      uninterpreted_option =
			  'erlang_++'(PFuninterpreted_option,
				      NFuninterpreted_option, TrUserData)}.

merge_msg_MethodDescriptorProto(#'MethodDescriptorProto'{name
							     = PFname,
							 input_type =
							     PFinput_type,
							 output_type =
							     PFoutput_type,
							 options = PFoptions,
							 client_streaming =
							     PFclient_streaming,
							 server_streaming =
							     PFserver_streaming},
				#'MethodDescriptorProto'{name = NFname,
							 input_type =
							     NFinput_type,
							 output_type =
							     NFoutput_type,
							 options = NFoptions,
							 client_streaming =
							     NFclient_streaming,
							 server_streaming =
							     NFserver_streaming},
				TrUserData) ->
    #'MethodDescriptorProto'{name =
				 if NFname =:= undefined -> PFname;
				    true -> NFname
				 end,
			     input_type =
				 if NFinput_type =:= undefined -> PFinput_type;
				    true -> NFinput_type
				 end,
			     output_type =
				 if NFoutput_type =:= undefined ->
					PFoutput_type;
				    true -> NFoutput_type
				 end,
			     options =
				 if PFoptions /= undefined,
				    NFoptions /= undefined ->
					merge_msg_MethodOptions(PFoptions,
								NFoptions,
								TrUserData);
				    PFoptions == undefined -> NFoptions;
				    NFoptions == undefined -> PFoptions
				 end,
			     client_streaming =
				 if NFclient_streaming =:= undefined ->
					PFclient_streaming;
				    true -> NFclient_streaming
				 end,
			     server_streaming =
				 if NFserver_streaming =:= undefined ->
					PFserver_streaming;
				    true -> NFserver_streaming
				 end}.

merge_msg_ServiceDescriptorProto(#'ServiceDescriptorProto'{name
							       = PFname,
							   method = PFmethod,
							   options = PFoptions},
				 #'ServiceDescriptorProto'{name = NFname,
							   method = NFmethod,
							   options = NFoptions},
				 TrUserData) ->
    #'ServiceDescriptorProto'{name =
				  if NFname =:= undefined -> PFname;
				     true -> NFname
				  end,
			      method =
				  'erlang_++'(PFmethod, NFmethod, TrUserData),
			      options =
				  if PFoptions /= undefined,
				     NFoptions /= undefined ->
					 merge_msg_ServiceOptions(PFoptions,
								  NFoptions,
								  TrUserData);
				     PFoptions == undefined -> NFoptions;
				     NFoptions == undefined -> PFoptions
				  end}.

merge_msg_MessageOptions(#'MessageOptions'{message_set_wire_format
					       = PFmessage_set_wire_format,
					   no_standard_descriptor_accessor =
					       PFno_standard_descriptor_accessor,
					   deprecated = PFdeprecated,
					   map_entry = PFmap_entry,
					   uninterpreted_option =
					       PFuninterpreted_option},
			 #'MessageOptions'{message_set_wire_format =
					       NFmessage_set_wire_format,
					   no_standard_descriptor_accessor =
					       NFno_standard_descriptor_accessor,
					   deprecated = NFdeprecated,
					   map_entry = NFmap_entry,
					   uninterpreted_option =
					       NFuninterpreted_option},
			 TrUserData) ->
    #'MessageOptions'{message_set_wire_format =
			  if NFmessage_set_wire_format =:= undefined ->
				 PFmessage_set_wire_format;
			     true -> NFmessage_set_wire_format
			  end,
		      no_standard_descriptor_accessor =
			  if NFno_standard_descriptor_accessor =:= undefined ->
				 PFno_standard_descriptor_accessor;
			     true -> NFno_standard_descriptor_accessor
			  end,
		      deprecated =
			  if NFdeprecated =:= undefined -> PFdeprecated;
			     true -> NFdeprecated
			  end,
		      map_entry =
			  if NFmap_entry =:= undefined -> PFmap_entry;
			     true -> NFmap_entry
			  end,
		      uninterpreted_option =
			  'erlang_++'(PFuninterpreted_option,
				      NFuninterpreted_option, TrUserData)}.

merge_msg_EnumValueDescriptorProto(#'EnumValueDescriptorProto'{name
								   = PFname,
							       number =
								   PFnumber,
							       options =
								   PFoptions},
				   #'EnumValueDescriptorProto'{name = NFname,
							       number =
								   NFnumber,
							       options =
								   NFoptions},
				   TrUserData) ->
    #'EnumValueDescriptorProto'{name =
				    if NFname =:= undefined -> PFname;
				       true -> NFname
				    end,
				number =
				    if NFnumber =:= undefined -> PFnumber;
				       true -> NFnumber
				    end,
				options =
				    if PFoptions /= undefined,
				       NFoptions /= undefined ->
					   merge_msg_EnumValueOptions(PFoptions,
								      NFoptions,
								      TrUserData);
				       PFoptions == undefined -> NFoptions;
				       NFoptions == undefined -> PFoptions
				    end}.

merge_msg_EnumDescriptorProto(#'EnumDescriptorProto'{name
							 = PFname,
						     value = PFvalue,
						     options = PFoptions},
			      #'EnumDescriptorProto'{name = NFname,
						     value = NFvalue,
						     options = NFoptions},
			      TrUserData) ->
    #'EnumDescriptorProto'{name =
			       if NFname =:= undefined -> PFname;
				  true -> NFname
			       end,
			   value = 'erlang_++'(PFvalue, NFvalue, TrUserData),
			   options =
			       if PFoptions /= undefined,
				  NFoptions /= undefined ->
				      merge_msg_EnumOptions(PFoptions,
							    NFoptions,
							    TrUserData);
				  PFoptions == undefined -> NFoptions;
				  NFoptions == undefined -> PFoptions
			       end}.

merge_msg_FieldOptions(#'FieldOptions'{ctype = PFctype,
				       packed = PFpacked, jstype = PFjstype,
				       lazy = PFlazy, deprecated = PFdeprecated,
				       weak = PFweak,
				       uninterpreted_option =
					   PFuninterpreted_option},
		       #'FieldOptions'{ctype = NFctype, packed = NFpacked,
				       jstype = NFjstype, lazy = NFlazy,
				       deprecated = NFdeprecated, weak = NFweak,
				       uninterpreted_option =
					   NFuninterpreted_option},
		       TrUserData) ->
    #'FieldOptions'{ctype =
			if NFctype =:= undefined -> PFctype;
			   true -> NFctype
			end,
		    packed =
			if NFpacked =:= undefined -> PFpacked;
			   true -> NFpacked
			end,
		    jstype =
			if NFjstype =:= undefined -> PFjstype;
			   true -> NFjstype
			end,
		    lazy =
			if NFlazy =:= undefined -> PFlazy;
			   true -> NFlazy
			end,
		    deprecated =
			if NFdeprecated =:= undefined -> PFdeprecated;
			   true -> NFdeprecated
			end,
		    weak =
			if NFweak =:= undefined -> PFweak;
			   true -> NFweak
			end,
		    uninterpreted_option =
			'erlang_++'(PFuninterpreted_option,
				    NFuninterpreted_option, TrUserData)}.

merge_msg_FieldDescriptorProto(#'FieldDescriptorProto'{name
							   = PFname,
						       number = PFnumber,
						       label = PFlabel,
						       type = PFtype,
						       type_name = PFtype_name,
						       extendee = PFextendee,
						       default_value =
							   PFdefault_value,
						       oneof_index =
							   PFoneof_index,
						       json_name = PFjson_name,
						       options = PFoptions},
			       #'FieldDescriptorProto'{name = NFname,
						       number = NFnumber,
						       label = NFlabel,
						       type = NFtype,
						       type_name = NFtype_name,
						       extendee = NFextendee,
						       default_value =
							   NFdefault_value,
						       oneof_index =
							   NFoneof_index,
						       json_name = NFjson_name,
						       options = NFoptions},
			       TrUserData) ->
    #'FieldDescriptorProto'{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end,
			    number =
				if NFnumber =:= undefined -> PFnumber;
				   true -> NFnumber
				end,
			    label =
				if NFlabel =:= undefined -> PFlabel;
				   true -> NFlabel
				end,
			    type =
				if NFtype =:= undefined -> PFtype;
				   true -> NFtype
				end,
			    type_name =
				if NFtype_name =:= undefined -> PFtype_name;
				   true -> NFtype_name
				end,
			    extendee =
				if NFextendee =:= undefined -> PFextendee;
				   true -> NFextendee
				end,
			    default_value =
				if NFdefault_value =:= undefined ->
				       PFdefault_value;
				   true -> NFdefault_value
				end,
			    oneof_index =
				if NFoneof_index =:= undefined -> PFoneof_index;
				   true -> NFoneof_index
				end,
			    json_name =
				if NFjson_name =:= undefined -> PFjson_name;
				   true -> NFjson_name
				end,
			    options =
				if PFoptions /= undefined,
				   NFoptions /= undefined ->
				       merge_msg_FieldOptions(PFoptions,
							      NFoptions,
							      TrUserData);
				   PFoptions == undefined -> NFoptions;
				   NFoptions == undefined -> PFoptions
				end}.

merge_msg_DescriptorProto(#'DescriptorProto'{name =
						 PFname,
					     field = PFfield,
					     extension = PFextension,
					     nested_type = PFnested_type,
					     enum_type = PFenum_type,
					     extension_range =
						 PFextension_range,
					     oneof_decl = PFoneof_decl,
					     options = PFoptions,
					     reserved_range = PFreserved_range,
					     reserved_name = PFreserved_name},
			  #'DescriptorProto'{name = NFname, field = NFfield,
					     extension = NFextension,
					     nested_type = NFnested_type,
					     enum_type = NFenum_type,
					     extension_range =
						 NFextension_range,
					     oneof_decl = NFoneof_decl,
					     options = NFoptions,
					     reserved_range = NFreserved_range,
					     reserved_name = NFreserved_name},
			  TrUserData) ->
    #'DescriptorProto'{name =
			   if NFname =:= undefined -> PFname;
			      true -> NFname
			   end,
		       field = 'erlang_++'(PFfield, NFfield, TrUserData),
		       extension =
			   'erlang_++'(PFextension, NFextension, TrUserData),
		       nested_type =
			   'erlang_++'(PFnested_type, NFnested_type,
				       TrUserData),
		       enum_type =
			   'erlang_++'(PFenum_type, NFenum_type, TrUserData),
		       extension_range =
			   'erlang_++'(PFextension_range, NFextension_range,
				       TrUserData),
		       oneof_decl =
			   'erlang_++'(PFoneof_decl, NFoneof_decl, TrUserData),
		       options =
			   if PFoptions /= undefined, NFoptions /= undefined ->
				  merge_msg_MessageOptions(PFoptions, NFoptions,
							   TrUserData);
			      PFoptions == undefined -> NFoptions;
			      NFoptions == undefined -> PFoptions
			   end,
		       reserved_range =
			   'erlang_++'(PFreserved_range, NFreserved_range,
				       TrUserData),
		       reserved_name =
			   'erlang_++'(PFreserved_name, NFreserved_name,
				       TrUserData)}.

'merge_msg_SourceCodeInfo.Location'(#'SourceCodeInfo.Location'{path
								   = PFpath,
							       span = PFspan,
							       leading_comments
								   =
								   PFleading_comments,
							       trailing_comments
								   =
								   PFtrailing_comments,
							       leading_detached_comments
								   =
								   PFleading_detached_comments},
				    #'SourceCodeInfo.Location'{path = NFpath,
							       span = NFspan,
							       leading_comments
								   =
								   NFleading_comments,
							       trailing_comments
								   =
								   NFtrailing_comments,
							       leading_detached_comments
								   =
								   NFleading_detached_comments},
				    TrUserData) ->
    #'SourceCodeInfo.Location'{path =
				   'erlang_++'(PFpath, NFpath, TrUserData),
			       span = 'erlang_++'(PFspan, NFspan, TrUserData),
			       leading_comments =
				   if NFleading_comments =:= undefined ->
					  PFleading_comments;
				      true -> NFleading_comments
				   end,
			       trailing_comments =
				   if NFtrailing_comments =:= undefined ->
					  PFtrailing_comments;
				      true -> NFtrailing_comments
				   end,
			       leading_detached_comments =
				   'erlang_++'(PFleading_detached_comments,
					       NFleading_detached_comments,
					       TrUserData)}.

merge_msg_SourceCodeInfo(#'SourceCodeInfo'{location =
					       PFlocation},
			 #'SourceCodeInfo'{location = NFlocation},
			 TrUserData) ->
    #'SourceCodeInfo'{location =
			  'erlang_++'(PFlocation, NFlocation, TrUserData)}.

merge_msg_FileDescriptorProto(#'FileDescriptorProto'{name
							 = PFname,
						     package = PFpackage,
						     dependency = PFdependency,
						     public_dependency =
							 PFpublic_dependency,
						     weak_dependency =
							 PFweak_dependency,
						     message_type =
							 PFmessage_type,
						     enum_type = PFenum_type,
						     service = PFservice,
						     extension = PFextension,
						     options = PFoptions,
						     source_code_info =
							 PFsource_code_info,
						     syntax = PFsyntax},
			      #'FileDescriptorProto'{name = NFname,
						     package = NFpackage,
						     dependency = NFdependency,
						     public_dependency =
							 NFpublic_dependency,
						     weak_dependency =
							 NFweak_dependency,
						     message_type =
							 NFmessage_type,
						     enum_type = NFenum_type,
						     service = NFservice,
						     extension = NFextension,
						     options = NFoptions,
						     source_code_info =
							 NFsource_code_info,
						     syntax = NFsyntax},
			      TrUserData) ->
    #'FileDescriptorProto'{name =
			       if NFname =:= undefined -> PFname;
				  true -> NFname
			       end,
			   package =
			       if NFpackage =:= undefined -> PFpackage;
				  true -> NFpackage
			       end,
			   dependency =
			       'erlang_++'(PFdependency, NFdependency,
					   TrUserData),
			   public_dependency =
			       'erlang_++'(PFpublic_dependency,
					   NFpublic_dependency, TrUserData),
			   weak_dependency =
			       'erlang_++'(PFweak_dependency, NFweak_dependency,
					   TrUserData),
			   message_type =
			       'erlang_++'(PFmessage_type, NFmessage_type,
					   TrUserData),
			   enum_type =
			       'erlang_++'(PFenum_type, NFenum_type,
					   TrUserData),
			   service =
			       'erlang_++'(PFservice, NFservice, TrUserData),
			   extension =
			       'erlang_++'(PFextension, NFextension,
					   TrUserData),
			   options =
			       if PFoptions /= undefined,
				  NFoptions /= undefined ->
				      merge_msg_FileOptions(PFoptions,
							    NFoptions,
							    TrUserData);
				  PFoptions == undefined -> NFoptions;
				  NFoptions == undefined -> PFoptions
			       end,
			   source_code_info =
			       if PFsource_code_info /= undefined,
				  NFsource_code_info /= undefined ->
				      merge_msg_SourceCodeInfo(PFsource_code_info,
							       NFsource_code_info,
							       TrUserData);
				  PFsource_code_info == undefined ->
				      NFsource_code_info;
				  NFsource_code_info == undefined ->
				      PFsource_code_info
			       end,
			   syntax =
			       if NFsyntax =:= undefined -> PFsyntax;
				  true -> NFsyntax
			       end}.

merge_msg_FileDescriptorSet(#'FileDescriptorSet'{file =
						     PFfile},
			    #'FileDescriptorSet'{file = NFfile}, TrUserData) ->
    #'FileDescriptorSet'{file =
			     'erlang_++'(PFfile, NFfile, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'OneofDescriptorProto'{} ->
	  v_msg_OneofDescriptorProto(Msg,
				     ['OneofDescriptorProto'], TrUserData);
      #'UninterpretedOption.NamePart'{} ->
	  'v_msg_UninterpretedOption.NamePart'(Msg,
					       ['UninterpretedOption.NamePart'],
					       TrUserData);
      #'UninterpretedOption'{} ->
	  v_msg_UninterpretedOption(Msg, ['UninterpretedOption'],
				    TrUserData);
      #'DescriptorProto.ReservedRange'{} ->
	  'v_msg_DescriptorProto.ReservedRange'(Msg,
						['DescriptorProto.ReservedRange'],
						TrUserData);
      #'DescriptorProto.ExtensionRange'{} ->
	  'v_msg_DescriptorProto.ExtensionRange'(Msg,
						 ['DescriptorProto.ExtensionRange'],
						 TrUserData);
      #'FileOptions'{} ->
	  v_msg_FileOptions(Msg, ['FileOptions'], TrUserData);
      #'MethodOptions'{} ->
	  v_msg_MethodOptions(Msg, ['MethodOptions'], TrUserData);
      #'EnumOptions'{} ->
	  v_msg_EnumOptions(Msg, ['EnumOptions'], TrUserData);
      #'EnumValueOptions'{} ->
	  v_msg_EnumValueOptions(Msg, ['EnumValueOptions'],
				 TrUserData);
      #'GeneratedCodeInfo.Annotation'{} ->
	  'v_msg_GeneratedCodeInfo.Annotation'(Msg,
					       ['GeneratedCodeInfo.Annotation'],
					       TrUserData);
      #'GeneratedCodeInfo'{} ->
	  v_msg_GeneratedCodeInfo(Msg, ['GeneratedCodeInfo'],
				  TrUserData);
      #'ServiceOptions'{} ->
	  v_msg_ServiceOptions(Msg, ['ServiceOptions'],
			       TrUserData);
      #'MethodDescriptorProto'{} ->
	  v_msg_MethodDescriptorProto(Msg,
				      ['MethodDescriptorProto'], TrUserData);
      #'ServiceDescriptorProto'{} ->
	  v_msg_ServiceDescriptorProto(Msg,
				       ['ServiceDescriptorProto'], TrUserData);
      #'MessageOptions'{} ->
	  v_msg_MessageOptions(Msg, ['MessageOptions'],
			       TrUserData);
      #'EnumValueDescriptorProto'{} ->
	  v_msg_EnumValueDescriptorProto(Msg,
					 ['EnumValueDescriptorProto'],
					 TrUserData);
      #'EnumDescriptorProto'{} ->
	  v_msg_EnumDescriptorProto(Msg, ['EnumDescriptorProto'],
				    TrUserData);
      #'FieldOptions'{} ->
	  v_msg_FieldOptions(Msg, ['FieldOptions'], TrUserData);
      #'FieldDescriptorProto'{} ->
	  v_msg_FieldDescriptorProto(Msg,
				     ['FieldDescriptorProto'], TrUserData);
      #'DescriptorProto'{} ->
	  v_msg_DescriptorProto(Msg, ['DescriptorProto'],
				TrUserData);
      #'SourceCodeInfo.Location'{} ->
	  'v_msg_SourceCodeInfo.Location'(Msg,
					  ['SourceCodeInfo.Location'],
					  TrUserData);
      #'SourceCodeInfo'{} ->
	  v_msg_SourceCodeInfo(Msg, ['SourceCodeInfo'],
			       TrUserData);
      #'FileDescriptorProto'{} ->
	  v_msg_FileDescriptorProto(Msg, ['FileDescriptorProto'],
				    TrUserData);
      #'FileDescriptorSet'{} ->
	  v_msg_FileDescriptorSet(Msg, ['FileDescriptorSet'],
				  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_OneofDescriptorProto/3}).
v_msg_OneofDescriptorProto(#'OneofDescriptorProto'{name
						       = F1},
			   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    ok;
v_msg_OneofDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OneofDescriptorProto'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_UninterpretedOption.NamePart'/3}).
'v_msg_UninterpretedOption.NamePart'(#'UninterpretedOption.NamePart'{name_part
									 = F1,
								     is_extension
									 = F2},
				     Path, _) ->
    v_type_string(F1, [name_part | Path]),
    v_type_bool(F2, [is_extension | Path]),
    ok;
'v_msg_UninterpretedOption.NamePart'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'UninterpretedOption.NamePart'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_UninterpretedOption/3}).
v_msg_UninterpretedOption(#'UninterpretedOption'{name =
						     F1,
						 identifier_value = F2,
						 positive_int_value = F3,
						 negative_int_value = F4,
						 double_value = F5,
						 string_value = F6,
						 aggregate_value = F7},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_UninterpretedOption.NamePart'(Elem,
						     [name | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption.NamePart'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [identifier_value | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [positive_int_value | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [negative_int_value | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_double(F5, [double_value | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [string_value | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [aggregate_value | Path])
    end,
    ok;
v_msg_UninterpretedOption(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UninterpretedOption'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_DescriptorProto.ReservedRange'/3}).
'v_msg_DescriptorProto.ReservedRange'(#'DescriptorProto.ReservedRange'{start
									   = F1,
								       'end' =
									   F2},
				      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [start | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, ['end' | Path])
    end,
    ok;
'v_msg_DescriptorProto.ReservedRange'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'DescriptorProto.ReservedRange'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_DescriptorProto.ExtensionRange'/3}).
'v_msg_DescriptorProto.ExtensionRange'(#'DescriptorProto.ExtensionRange'{start
									     =
									     F1,
									 'end' =
									     F2},
				       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [start | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, ['end' | Path])
    end,
    ok;
'v_msg_DescriptorProto.ExtensionRange'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'DescriptorProto.ExtensionRange'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_FileOptions/3}).
v_msg_FileOptions(#'FileOptions'{java_package = F1,
				 java_outer_classname = F2,
				 java_multiple_files = F3,
				 java_generate_equals_and_hash = F4,
				 java_string_check_utf8 = F5, optimize_for = F6,
				 go_package = F7, cc_generic_services = F8,
				 java_generic_services = F9,
				 py_generic_services = F10, deprecated = F11,
				 cc_enable_arenas = F12,
				 objc_class_prefix = F13,
				 csharp_namespace = F14,
				 javanano_use_deprecated_package = F15,
				 uninterpreted_option = F16},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [java_package | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [java_outer_classname | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [java_multiple_files | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bool(F4, [java_generate_equals_and_hash | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [java_string_check_utf8 | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_FileOptions.OptimizeMode'(F6,
					     [optimize_for | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [go_package | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [cc_generic_services | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [java_generic_services | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bool(F10, [py_generic_services | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [deprecated | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_bool(F12, [cc_enable_arenas | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_string(F13, [objc_class_prefix | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_string(F14, [csharp_namespace | Path])
    end,
    if F15 == undefined -> ok;
       true ->
	   v_type_bool(F15,
		       [javanano_use_deprecated_package | Path])
    end,
    if is_list(F16) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F16],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F16, Path)
    end,
    ok;
v_msg_FileOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FileOptions'}, X, Path).

-dialyzer({nowarn_function,v_msg_MethodOptions/3}).
v_msg_MethodOptions(#'MethodOptions'{deprecated = F1,
				     uninterpreted_option = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [deprecated | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F2, Path)
    end,
    ok;
v_msg_MethodOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MethodOptions'}, X, Path).

-dialyzer({nowarn_function,v_msg_EnumOptions/3}).
v_msg_EnumOptions(#'EnumOptions'{allow_alias = F1,
				 deprecated = F2, uninterpreted_option = F3},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [allow_alias | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [deprecated | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F3, Path)
    end,
    ok;
v_msg_EnumOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnumOptions'}, X, Path).

-dialyzer({nowarn_function,v_msg_EnumValueOptions/3}).
v_msg_EnumValueOptions(#'EnumValueOptions'{deprecated =
					       F1,
					   uninterpreted_option = F2},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [deprecated | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F2, Path)
    end,
    ok;
v_msg_EnumValueOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnumValueOptions'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_GeneratedCodeInfo.Annotation'/3}).
'v_msg_GeneratedCodeInfo.Annotation'(#'GeneratedCodeInfo.Annotation'{path
									 = F1,
								     source_file
									 = F2,
								     'begin' =
									 F3,
								     'end' =
									 F4},
				     Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [path | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [source_file | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, ['begin' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, ['end' | Path])
    end,
    ok;
'v_msg_GeneratedCodeInfo.Annotation'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'GeneratedCodeInfo.Annotation'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_GeneratedCodeInfo/3}).
v_msg_GeneratedCodeInfo(#'GeneratedCodeInfo'{annotation
						 = F1},
			Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_GeneratedCodeInfo.Annotation'(Elem,
						     [annotation | Path],
						     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'GeneratedCodeInfo.Annotation'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ServiceOptions/3}).
v_msg_ServiceOptions(#'ServiceOptions'{deprecated = F1,
				       uninterpreted_option = F2},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [deprecated | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F2, Path)
    end,
    ok;
v_msg_ServiceOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServiceOptions'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_MethodDescriptorProto/3}).
v_msg_MethodDescriptorProto(#'MethodDescriptorProto'{name
							 = F1,
						     input_type = F2,
						     output_type = F3,
						     options = F4,
						     client_streaming = F5,
						     server_streaming = F6},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [input_type | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [output_type | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_MethodOptions(F4, [options | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [client_streaming | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [server_streaming | Path])
    end,
    ok;
v_msg_MethodDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MethodDescriptorProto'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ServiceDescriptorProto/3}).
v_msg_ServiceDescriptorProto(#'ServiceDescriptorProto'{name
							   = F1,
						       method = F2,
						       options = F3},
			     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_MethodDescriptorProto(Elem, [method | Path],
					    TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'MethodDescriptorProto'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_ServiceOptions(F3, [options | Path], TrUserData)
    end,
    ok;
v_msg_ServiceDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServiceDescriptorProto'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_MessageOptions/3}).
v_msg_MessageOptions(#'MessageOptions'{message_set_wire_format
					   = F1,
				       no_standard_descriptor_accessor = F2,
				       deprecated = F3, map_entry = F4,
				       uninterpreted_option = F5},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bool(F1, [message_set_wire_format | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2,
		       [no_standard_descriptor_accessor | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [deprecated | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [map_entry | Path])
    end,
    if is_list(F5) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F5, Path)
    end,
    ok;
v_msg_MessageOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MessageOptions'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_EnumValueDescriptorProto/3}).
v_msg_EnumValueDescriptorProto(#'EnumValueDescriptorProto'{name
							       = F1,
							   number = F2,
							   options = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [number | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_EnumValueOptions(F3, [options | Path], TrUserData)
    end,
    ok;
v_msg_EnumValueDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'EnumValueDescriptorProto'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_EnumDescriptorProto/3}).
v_msg_EnumDescriptorProto(#'EnumDescriptorProto'{name =
						     F1,
						 value = F2, options = F3},
			  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_EnumValueDescriptorProto(Elem,
					       [value | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'EnumValueDescriptorProto'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_EnumOptions(F3, [options | Path], TrUserData)
    end,
    ok;
v_msg_EnumDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EnumDescriptorProto'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_FieldOptions/3}).
v_msg_FieldOptions(#'FieldOptions'{ctype = F1,
				   packed = F2, jstype = F3, lazy = F4,
				   deprecated = F5, weak = F6,
				   uninterpreted_option = F7},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_FieldOptions.CType'(F1, [ctype | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [packed | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_FieldOptions.JSType'(F3, [jstype | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [lazy | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [deprecated | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [weak | Path])
    end,
    if is_list(F7) ->
	   _ = [v_msg_UninterpretedOption(Elem,
					  [uninterpreted_option | Path],
					  TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F7, Path)
    end,
    ok;
v_msg_FieldOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FieldOptions'}, X, Path).

-dialyzer({nowarn_function,v_msg_FieldDescriptorProto/3}).
v_msg_FieldDescriptorProto(#'FieldDescriptorProto'{name
						       = F1,
						   number = F2, label = F3,
						   type = F4, type_name = F5,
						   extendee = F6,
						   default_value = F7,
						   oneof_index = F8,
						   json_name = F9,
						   options = F10},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [number | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_FieldDescriptorProto.Label'(F3, [label | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_FieldDescriptorProto.Type'(F4, [type | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [type_name | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [extendee | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [default_value | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [oneof_index | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [json_name | Path])
    end,
    if F10 == undefined -> ok;
       true ->
	   v_msg_FieldOptions(F10, [options | Path], TrUserData)
    end,
    ok;
v_msg_FieldDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FieldDescriptorProto'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_DescriptorProto/3}).
v_msg_DescriptorProto(#'DescriptorProto'{name = F1,
					 field = F2, extension = F3,
					 nested_type = F4, enum_type = F5,
					 extension_range = F6, oneof_decl = F7,
					 options = F8, reserved_range = F9,
					 reserved_name = F10},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_FieldDescriptorProto(Elem, [field | Path],
					   TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FieldDescriptorProto'}},
			 F2, Path)
    end,
    if is_list(F3) ->
	   _ = [v_msg_FieldDescriptorProto(Elem,
					   [extension | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FieldDescriptorProto'}},
			 F3, Path)
    end,
    if is_list(F4) ->
	   _ = [v_msg_DescriptorProto(Elem, [nested_type | Path],
				      TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto'}},
			 F4, Path)
    end,
    if is_list(F5) ->
	   _ = [v_msg_EnumDescriptorProto(Elem, [enum_type | Path],
					  TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'EnumDescriptorProto'}},
			 F5, Path)
    end,
    if is_list(F6) ->
	   _ = ['v_msg_DescriptorProto.ExtensionRange'(Elem,
						       [extension_range | Path],
						       TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto.ExtensionRange'}},
			 F6, Path)
    end,
    if is_list(F7) ->
	   _ = [v_msg_OneofDescriptorProto(Elem,
					   [oneof_decl | Path], TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'OneofDescriptorProto'}},
			 F7, Path)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_MessageOptions(F8, [options | Path], TrUserData)
    end,
    if is_list(F9) ->
	   _ = ['v_msg_DescriptorProto.ReservedRange'(Elem,
						      [reserved_range | Path],
						      TrUserData)
		|| Elem <- F9],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto.ReservedRange'}},
			 F9, Path)
    end,
    if is_list(F10) ->
	   _ = [v_type_string(Elem, [reserved_name | Path])
		|| Elem <- F10],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F10, Path)
    end,
    ok;
v_msg_DescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DescriptorProto'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_SourceCodeInfo.Location'/3}).
'v_msg_SourceCodeInfo.Location'(#'SourceCodeInfo.Location'{path
							       = F1,
							   span = F2,
							   leading_comments =
							       F3,
							   trailing_comments =
							       F4,
							   leading_detached_comments
							       = F5},
				Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [path | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1, Path)
    end,
    if is_list(F2) ->
	   _ = [v_type_int32(Elem, [span | Path]) || Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [leading_comments | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [trailing_comments | Path])
    end,
    if is_list(F5) ->
	   _ = [v_type_string(Elem,
			      [leading_detached_comments | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F5, Path)
    end,
    ok;
'v_msg_SourceCodeInfo.Location'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SourceCodeInfo.Location'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_SourceCodeInfo/3}).
v_msg_SourceCodeInfo(#'SourceCodeInfo'{location = F1},
		     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_SourceCodeInfo.Location'(Elem,
						[location | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SourceCodeInfo.Location'}},
			 F1, Path)
    end,
    ok;
v_msg_SourceCodeInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SourceCodeInfo'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_FileDescriptorProto/3}).
v_msg_FileDescriptorProto(#'FileDescriptorProto'{name =
						     F1,
						 package = F2, dependency = F3,
						 public_dependency = F4,
						 weak_dependency = F5,
						 message_type = F6,
						 enum_type = F7, service = F8,
						 extension = F9, options = F10,
						 source_code_info = F11,
						 syntax = F12},
			  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [package | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [dependency | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    if is_list(F4) ->
	   _ = [v_type_int32(Elem, [public_dependency | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F4, Path)
    end,
    if is_list(F5) ->
	   _ = [v_type_int32(Elem, [weak_dependency | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F5, Path)
    end,
    if is_list(F6) ->
	   _ = [v_msg_DescriptorProto(Elem, [message_type | Path],
				      TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto'}},
			 F6, Path)
    end,
    if is_list(F7) ->
	   _ = [v_msg_EnumDescriptorProto(Elem, [enum_type | Path],
					  TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'EnumDescriptorProto'}},
			 F7, Path)
    end,
    if is_list(F8) ->
	   _ = [v_msg_ServiceDescriptorProto(Elem,
					     [service | Path], TrUserData)
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ServiceDescriptorProto'}},
			 F8, Path)
    end,
    if is_list(F9) ->
	   _ = [v_msg_FieldDescriptorProto(Elem,
					   [extension | Path], TrUserData)
		|| Elem <- F9],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FieldDescriptorProto'}},
			 F9, Path)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_msg_FileOptions(F10, [options | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true ->
	   v_msg_SourceCodeInfo(F11, [source_code_info | Path],
				TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_string(F12, [syntax | Path])
    end,
    ok;
v_msg_FileDescriptorProto(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FileDescriptorProto'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_FileDescriptorSet/3}).
v_msg_FileDescriptorSet(#'FileDescriptorSet'{file = F1},
			Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_FileDescriptorProto(Elem, [file | Path],
					  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FileDescriptorProto'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,'v_enum_FieldDescriptorProto.Type'/2}).
'v_enum_FieldDescriptorProto.Type'('TYPE_DOUBLE',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_FLOAT',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_INT64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_UINT64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_INT32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_FIXED64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_FIXED32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_BOOL',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_STRING',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_GROUP',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_MESSAGE',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_BYTES',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_UINT32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_ENUM',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SFIXED32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SFIXED64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SINT32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SINT64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_FieldDescriptorProto.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FieldDescriptorProto.Type'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_FieldDescriptorProto.Label'/2}).
'v_enum_FieldDescriptorProto.Label'('LABEL_OPTIONAL',
				    _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Label'('LABEL_REQUIRED',
				    _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Label'('LABEL_REPEATED',
				    _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Label'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_FieldDescriptorProto.Label'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FieldDescriptorProto.Label'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_FileOptions.OptimizeMode'/2}).
'v_enum_FileOptions.OptimizeMode'('SPEED', _Path) -> ok;
'v_enum_FileOptions.OptimizeMode'('CODE_SIZE', _Path) ->
    ok;
'v_enum_FileOptions.OptimizeMode'('LITE_RUNTIME',
				  _Path) ->
    ok;
'v_enum_FileOptions.OptimizeMode'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_FileOptions.OptimizeMode'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FileOptions.OptimizeMode'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_FieldOptions.CType'/2}).
'v_enum_FieldOptions.CType'('STRING', _Path) -> ok;
'v_enum_FieldOptions.CType'('CORD', _Path) -> ok;
'v_enum_FieldOptions.CType'('STRING_PIECE', _Path) ->
    ok;
'v_enum_FieldOptions.CType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_FieldOptions.CType'(X, Path) ->
    mk_type_error({invalid_enum, 'FieldOptions.CType'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_FieldOptions.JSType'/2}).
'v_enum_FieldOptions.JSType'('JS_NORMAL', _Path) -> ok;
'v_enum_FieldOptions.JSType'('JS_STRING', _Path) -> ok;
'v_enum_FieldOptions.JSType'('JS_NUMBER', _Path) -> ok;
'v_enum_FieldOptions.JSType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_FieldOptions.JSType'(X, Path) ->
    mk_type_error({invalid_enum, 'FieldOptions.JSType'}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_double/2}).
v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(infinity, _Path) -> ok;
v_type_double('-infinity', _Path) -> ok;
v_type_double(nan, _Path) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'FieldDescriptorProto.Type'},
      [{'TYPE_DOUBLE', 1}, {'TYPE_FLOAT', 2},
       {'TYPE_INT64', 3}, {'TYPE_UINT64', 4},
       {'TYPE_INT32', 5}, {'TYPE_FIXED64', 6},
       {'TYPE_FIXED32', 7}, {'TYPE_BOOL', 8},
       {'TYPE_STRING', 9}, {'TYPE_GROUP', 10},
       {'TYPE_MESSAGE', 11}, {'TYPE_BYTES', 12},
       {'TYPE_UINT32', 13}, {'TYPE_ENUM', 14},
       {'TYPE_SFIXED32', 15}, {'TYPE_SFIXED64', 16},
       {'TYPE_SINT32', 17}, {'TYPE_SINT64', 18}]},
     {{enum, 'FieldDescriptorProto.Label'},
      [{'LABEL_OPTIONAL', 1}, {'LABEL_REQUIRED', 2},
       {'LABEL_REPEATED', 3}]},
     {{enum, 'FileOptions.OptimizeMode'},
      [{'SPEED', 1}, {'CODE_SIZE', 2}, {'LITE_RUNTIME', 3}]},
     {{enum, 'FieldOptions.CType'},
      [{'STRING', 0}, {'CORD', 1}, {'STRING_PIECE', 2}]},
     {{enum, 'FieldOptions.JSType'},
      [{'JS_NORMAL', 0}, {'JS_STRING', 1}, {'JS_NUMBER', 2}]},
     {{msg, 'OneofDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'UninterpretedOption.NamePart'},
      [#field{name = name_part, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = is_extension, fnum = 2, rnum = 3,
	      type = bool, occurrence = required, opts = []}]},
     {{msg, 'UninterpretedOption'},
      [#field{name = name, fnum = 2, rnum = 2,
	      type = {msg, 'UninterpretedOption.NamePart'},
	      occurrence = repeated, opts = []},
       #field{name = identifier_value, fnum = 3, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = positive_int_value, fnum = 4, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = negative_int_value, fnum = 5, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = double_value, fnum = 6, rnum = 6,
	      type = double, occurrence = optional, opts = []},
       #field{name = string_value, fnum = 7, rnum = 7,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = aggregate_value, fnum = 8, rnum = 8,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'DescriptorProto.ReservedRange'},
      [#field{name = start, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'DescriptorProto.ExtensionRange'},
      [#field{name = start, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'FileOptions'},
      [#field{name = java_package, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = java_outer_classname, fnum = 8, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = java_multiple_files, fnum = 10, rnum = 4,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = java_generate_equals_and_hash, fnum = 20,
	      rnum = 5, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = java_string_check_utf8, fnum = 27,
	      rnum = 6, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = optimize_for, fnum = 9, rnum = 7,
	      type = {enum, 'FileOptions.OptimizeMode'},
	      occurrence = optional, opts = [{default, 'SPEED'}]},
       #field{name = go_package, fnum = 11, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = cc_generic_services, fnum = 16, rnum = 9,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = java_generic_services, fnum = 17,
	      rnum = 10, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = py_generic_services, fnum = 18, rnum = 11,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = deprecated, fnum = 23, rnum = 12,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = cc_enable_arenas, fnum = 31, rnum = 13,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = objc_class_prefix, fnum = 36, rnum = 14,
	      type = string, occurrence = optional, opts = []},
       #field{name = csharp_namespace, fnum = 37, rnum = 15,
	      type = string, occurrence = optional, opts = []},
       #field{name = javanano_use_deprecated_package,
	      fnum = 38, rnum = 16, type = bool,
	      occurrence = optional, opts = [deprecated]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 17, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'MethodOptions'},
      [#field{name = deprecated, fnum = 33, rnum = 2,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 3, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'EnumOptions'},
      [#field{name = allow_alias, fnum = 2, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = deprecated, fnum = 3, rnum = 3,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 4, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'EnumValueOptions'},
      [#field{name = deprecated, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 3, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'GeneratedCodeInfo.Annotation'},
      [#field{name = path, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = [packed]},
       #field{name = source_file, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = 'begin', fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = 'end', fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'GeneratedCodeInfo'},
      [#field{name = annotation, fnum = 1, rnum = 2,
	      type = {msg, 'GeneratedCodeInfo.Annotation'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ServiceOptions'},
      [#field{name = deprecated, fnum = 33, rnum = 2,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 3, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'MethodDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = input_type, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = output_type, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = options, fnum = 4, rnum = 5,
	      type = {msg, 'MethodOptions'}, occurrence = optional,
	      opts = []},
       #field{name = client_streaming, fnum = 5, rnum = 6,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = server_streaming, fnum = 6, rnum = 7,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]}]},
     {{msg, 'ServiceDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = method, fnum = 2, rnum = 3,
	      type = {msg, 'MethodDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 3, rnum = 4,
	      type = {msg, 'ServiceOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'MessageOptions'},
      [#field{name = message_set_wire_format, fnum = 1,
	      rnum = 2, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = no_standard_descriptor_accessor, fnum = 2,
	      rnum = 3, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = deprecated, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = map_entry, fnum = 7, rnum = 5,
	      type = bool, occurrence = optional, opts = []},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 6, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'EnumValueDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = number, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = options, fnum = 3, rnum = 4,
	      type = {msg, 'EnumValueOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'EnumDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3,
	      type = {msg, 'EnumValueDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 3, rnum = 4,
	      type = {msg, 'EnumOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'FieldOptions'},
      [#field{name = ctype, fnum = 1, rnum = 2,
	      type = {enum, 'FieldOptions.CType'},
	      occurrence = optional, opts = [{default, 'STRING'}]},
       #field{name = packed, fnum = 2, rnum = 3, type = bool,
	      occurrence = optional, opts = []},
       #field{name = jstype, fnum = 6, rnum = 4,
	      type = {enum, 'FieldOptions.JSType'},
	      occurrence = optional, opts = [{default, 'JS_NORMAL'}]},
       #field{name = lazy, fnum = 5, rnum = 5, type = bool,
	      occurrence = optional, opts = [{default, false}]},
       #field{name = deprecated, fnum = 3, rnum = 6,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = weak, fnum = 10, rnum = 7, type = bool,
	      occurrence = optional, opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 8, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'FieldDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = number, fnum = 3, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = label, fnum = 4, rnum = 4,
	      type = {enum, 'FieldDescriptorProto.Label'},
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 5, rnum = 5,
	      type = {enum, 'FieldDescriptorProto.Type'},
	      occurrence = optional, opts = []},
       #field{name = type_name, fnum = 6, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = extendee, fnum = 2, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = default_value, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = oneof_index, fnum = 9, rnum = 9,
	      type = int32, occurrence = optional, opts = []},
       #field{name = json_name, fnum = 10, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = options, fnum = 8, rnum = 11,
	      type = {msg, 'FieldOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'DescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = field, fnum = 2, rnum = 3,
	      type = {msg, 'FieldDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = extension, fnum = 6, rnum = 4,
	      type = {msg, 'FieldDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = nested_type, fnum = 3, rnum = 5,
	      type = {msg, 'DescriptorProto'}, occurrence = repeated,
	      opts = []},
       #field{name = enum_type, fnum = 4, rnum = 6,
	      type = {msg, 'EnumDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = extension_range, fnum = 5, rnum = 7,
	      type = {msg, 'DescriptorProto.ExtensionRange'},
	      occurrence = repeated, opts = []},
       #field{name = oneof_decl, fnum = 8, rnum = 8,
	      type = {msg, 'OneofDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 7, rnum = 9,
	      type = {msg, 'MessageOptions'}, occurrence = optional,
	      opts = []},
       #field{name = reserved_range, fnum = 9, rnum = 10,
	      type = {msg, 'DescriptorProto.ReservedRange'},
	      occurrence = repeated, opts = []},
       #field{name = reserved_name, fnum = 10, rnum = 11,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'SourceCodeInfo.Location'},
      [#field{name = path, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = [packed]},
       #field{name = span, fnum = 2, rnum = 3, type = int32,
	      occurrence = repeated, opts = [packed]},
       #field{name = leading_comments, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = trailing_comments, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = leading_detached_comments, fnum = 6,
	      rnum = 6, type = string, occurrence = repeated,
	      opts = []}]},
     {{msg, 'SourceCodeInfo'},
      [#field{name = location, fnum = 1, rnum = 2,
	      type = {msg, 'SourceCodeInfo.Location'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'FileDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = package, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = dependency, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []},
       #field{name = public_dependency, fnum = 10, rnum = 5,
	      type = int32, occurrence = repeated, opts = []},
       #field{name = weak_dependency, fnum = 11, rnum = 6,
	      type = int32, occurrence = repeated, opts = []},
       #field{name = message_type, fnum = 4, rnum = 7,
	      type = {msg, 'DescriptorProto'}, occurrence = repeated,
	      opts = []},
       #field{name = enum_type, fnum = 5, rnum = 8,
	      type = {msg, 'EnumDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = service, fnum = 6, rnum = 9,
	      type = {msg, 'ServiceDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = extension, fnum = 7, rnum = 10,
	      type = {msg, 'FieldDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 8, rnum = 11,
	      type = {msg, 'FileOptions'}, occurrence = optional,
	      opts = []},
       #field{name = source_code_info, fnum = 9, rnum = 12,
	      type = {msg, 'SourceCodeInfo'}, occurrence = optional,
	      opts = []},
       #field{name = syntax, fnum = 12, rnum = 13,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'FileDescriptorSet'},
      [#field{name = file, fnum = 1, rnum = 2,
	      type = {msg, 'FileDescriptorProto'},
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['OneofDescriptorProto', 'UninterpretedOption.NamePart',
     'UninterpretedOption', 'DescriptorProto.ReservedRange',
     'DescriptorProto.ExtensionRange', 'FileOptions',
     'MethodOptions', 'EnumOptions', 'EnumValueOptions',
     'GeneratedCodeInfo.Annotation', 'GeneratedCodeInfo',
     'ServiceOptions', 'MethodDescriptorProto',
     'ServiceDescriptorProto', 'MessageOptions',
     'EnumValueDescriptorProto', 'EnumDescriptorProto',
     'FieldOptions', 'FieldDescriptorProto',
     'DescriptorProto', 'SourceCodeInfo.Location',
     'SourceCodeInfo', 'FileDescriptorProto',
     'FileDescriptorSet'].


get_enum_names() ->
    ['FieldDescriptorProto.Type',
     'FieldDescriptorProto.Label',
     'FileOptions.OptimizeMode', 'FieldOptions.CType',
     'FieldOptions.JSType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('OneofDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('UninterpretedOption.NamePart') ->
    [#field{name = name_part, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = is_extension, fnum = 2, rnum = 3,
	    type = bool, occurrence = required, opts = []}];
find_msg_def('UninterpretedOption') ->
    [#field{name = name, fnum = 2, rnum = 2,
	    type = {msg, 'UninterpretedOption.NamePart'},
	    occurrence = repeated, opts = []},
     #field{name = identifier_value, fnum = 3, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = positive_int_value, fnum = 4, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = negative_int_value, fnum = 5, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = double_value, fnum = 6, rnum = 6,
	    type = double, occurrence = optional, opts = []},
     #field{name = string_value, fnum = 7, rnum = 7,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = aggregate_value, fnum = 8, rnum = 8,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('DescriptorProto.ReservedRange') ->
    [#field{name = start, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('DescriptorProto.ExtensionRange') ->
    [#field{name = start, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('FileOptions') ->
    [#field{name = java_package, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = java_outer_classname, fnum = 8, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = java_multiple_files, fnum = 10, rnum = 4,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = java_generate_equals_and_hash, fnum = 20,
	    rnum = 5, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = java_string_check_utf8, fnum = 27,
	    rnum = 6, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = optimize_for, fnum = 9, rnum = 7,
	    type = {enum, 'FileOptions.OptimizeMode'},
	    occurrence = optional, opts = [{default, 'SPEED'}]},
     #field{name = go_package, fnum = 11, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = cc_generic_services, fnum = 16, rnum = 9,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = java_generic_services, fnum = 17,
	    rnum = 10, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = py_generic_services, fnum = 18, rnum = 11,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = deprecated, fnum = 23, rnum = 12,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = cc_enable_arenas, fnum = 31, rnum = 13,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = objc_class_prefix, fnum = 36, rnum = 14,
	    type = string, occurrence = optional, opts = []},
     #field{name = csharp_namespace, fnum = 37, rnum = 15,
	    type = string, occurrence = optional, opts = []},
     #field{name = javanano_use_deprecated_package,
	    fnum = 38, rnum = 16, type = bool,
	    occurrence = optional, opts = [deprecated]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 17, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('MethodOptions') ->
    [#field{name = deprecated, fnum = 33, rnum = 2,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 3, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('EnumOptions') ->
    [#field{name = allow_alias, fnum = 2, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = deprecated, fnum = 3, rnum = 3,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 4, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('EnumValueOptions') ->
    [#field{name = deprecated, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 3, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('GeneratedCodeInfo.Annotation') ->
    [#field{name = path, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = [packed]},
     #field{name = source_file, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = 'begin', fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = 'end', fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('GeneratedCodeInfo') ->
    [#field{name = annotation, fnum = 1, rnum = 2,
	    type = {msg, 'GeneratedCodeInfo.Annotation'},
	    occurrence = repeated, opts = []}];
find_msg_def('ServiceOptions') ->
    [#field{name = deprecated, fnum = 33, rnum = 2,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 3, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('MethodDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = input_type, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = output_type, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = options, fnum = 4, rnum = 5,
	    type = {msg, 'MethodOptions'}, occurrence = optional,
	    opts = []},
     #field{name = client_streaming, fnum = 5, rnum = 6,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = server_streaming, fnum = 6, rnum = 7,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]}];
find_msg_def('ServiceDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = method, fnum = 2, rnum = 3,
	    type = {msg, 'MethodDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 3, rnum = 4,
	    type = {msg, 'ServiceOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('MessageOptions') ->
    [#field{name = message_set_wire_format, fnum = 1,
	    rnum = 2, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = no_standard_descriptor_accessor, fnum = 2,
	    rnum = 3, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = deprecated, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = map_entry, fnum = 7, rnum = 5,
	    type = bool, occurrence = optional, opts = []},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 6, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('EnumValueDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = number, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = options, fnum = 3, rnum = 4,
	    type = {msg, 'EnumValueOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('EnumDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3,
	    type = {msg, 'EnumValueDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 3, rnum = 4,
	    type = {msg, 'EnumOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('FieldOptions') ->
    [#field{name = ctype, fnum = 1, rnum = 2,
	    type = {enum, 'FieldOptions.CType'},
	    occurrence = optional, opts = [{default, 'STRING'}]},
     #field{name = packed, fnum = 2, rnum = 3, type = bool,
	    occurrence = optional, opts = []},
     #field{name = jstype, fnum = 6, rnum = 4,
	    type = {enum, 'FieldOptions.JSType'},
	    occurrence = optional, opts = [{default, 'JS_NORMAL'}]},
     #field{name = lazy, fnum = 5, rnum = 5, type = bool,
	    occurrence = optional, opts = [{default, false}]},
     #field{name = deprecated, fnum = 3, rnum = 6,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = weak, fnum = 10, rnum = 7, type = bool,
	    occurrence = optional, opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 8, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('FieldDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = number, fnum = 3, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = label, fnum = 4, rnum = 4,
	    type = {enum, 'FieldDescriptorProto.Label'},
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 5, rnum = 5,
	    type = {enum, 'FieldDescriptorProto.Type'},
	    occurrence = optional, opts = []},
     #field{name = type_name, fnum = 6, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = extendee, fnum = 2, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = default_value, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = oneof_index, fnum = 9, rnum = 9,
	    type = int32, occurrence = optional, opts = []},
     #field{name = json_name, fnum = 10, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = options, fnum = 8, rnum = 11,
	    type = {msg, 'FieldOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('DescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = field, fnum = 2, rnum = 3,
	    type = {msg, 'FieldDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = extension, fnum = 6, rnum = 4,
	    type = {msg, 'FieldDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = nested_type, fnum = 3, rnum = 5,
	    type = {msg, 'DescriptorProto'}, occurrence = repeated,
	    opts = []},
     #field{name = enum_type, fnum = 4, rnum = 6,
	    type = {msg, 'EnumDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = extension_range, fnum = 5, rnum = 7,
	    type = {msg, 'DescriptorProto.ExtensionRange'},
	    occurrence = repeated, opts = []},
     #field{name = oneof_decl, fnum = 8, rnum = 8,
	    type = {msg, 'OneofDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 7, rnum = 9,
	    type = {msg, 'MessageOptions'}, occurrence = optional,
	    opts = []},
     #field{name = reserved_range, fnum = 9, rnum = 10,
	    type = {msg, 'DescriptorProto.ReservedRange'},
	    occurrence = repeated, opts = []},
     #field{name = reserved_name, fnum = 10, rnum = 11,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('SourceCodeInfo.Location') ->
    [#field{name = path, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = [packed]},
     #field{name = span, fnum = 2, rnum = 3, type = int32,
	    occurrence = repeated, opts = [packed]},
     #field{name = leading_comments, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = trailing_comments, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = leading_detached_comments, fnum = 6,
	    rnum = 6, type = string, occurrence = repeated,
	    opts = []}];
find_msg_def('SourceCodeInfo') ->
    [#field{name = location, fnum = 1, rnum = 2,
	    type = {msg, 'SourceCodeInfo.Location'},
	    occurrence = repeated, opts = []}];
find_msg_def('FileDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = package, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = dependency, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []},
     #field{name = public_dependency, fnum = 10, rnum = 5,
	    type = int32, occurrence = repeated, opts = []},
     #field{name = weak_dependency, fnum = 11, rnum = 6,
	    type = int32, occurrence = repeated, opts = []},
     #field{name = message_type, fnum = 4, rnum = 7,
	    type = {msg, 'DescriptorProto'}, occurrence = repeated,
	    opts = []},
     #field{name = enum_type, fnum = 5, rnum = 8,
	    type = {msg, 'EnumDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = service, fnum = 6, rnum = 9,
	    type = {msg, 'ServiceDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = extension, fnum = 7, rnum = 10,
	    type = {msg, 'FieldDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 8, rnum = 11,
	    type = {msg, 'FileOptions'}, occurrence = optional,
	    opts = []},
     #field{name = source_code_info, fnum = 9, rnum = 12,
	    type = {msg, 'SourceCodeInfo'}, occurrence = optional,
	    opts = []},
     #field{name = syntax, fnum = 12, rnum = 13,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('FileDescriptorSet') ->
    [#field{name = file, fnum = 1, rnum = 2,
	    type = {msg, 'FileDescriptorProto'},
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('FieldDescriptorProto.Type') ->
    [{'TYPE_DOUBLE', 1}, {'TYPE_FLOAT', 2},
     {'TYPE_INT64', 3}, {'TYPE_UINT64', 4},
     {'TYPE_INT32', 5}, {'TYPE_FIXED64', 6},
     {'TYPE_FIXED32', 7}, {'TYPE_BOOL', 8},
     {'TYPE_STRING', 9}, {'TYPE_GROUP', 10},
     {'TYPE_MESSAGE', 11}, {'TYPE_BYTES', 12},
     {'TYPE_UINT32', 13}, {'TYPE_ENUM', 14},
     {'TYPE_SFIXED32', 15}, {'TYPE_SFIXED64', 16},
     {'TYPE_SINT32', 17}, {'TYPE_SINT64', 18}];
find_enum_def('FieldDescriptorProto.Label') ->
    [{'LABEL_OPTIONAL', 1}, {'LABEL_REQUIRED', 2},
     {'LABEL_REPEATED', 3}];
find_enum_def('FileOptions.OptimizeMode') ->
    [{'SPEED', 1}, {'CODE_SIZE', 2}, {'LITE_RUNTIME', 3}];
find_enum_def('FieldOptions.CType') ->
    [{'STRING', 0}, {'CORD', 1}, {'STRING_PIECE', 2}];
find_enum_def('FieldOptions.JSType') ->
    [{'JS_NORMAL', 0}, {'JS_STRING', 1}, {'JS_NUMBER', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('FieldDescriptorProto.Type',
		     Value) ->
    'enum_symbol_by_value_FieldDescriptorProto.Type'(Value);
enum_symbol_by_value('FieldDescriptorProto.Label',
		     Value) ->
    'enum_symbol_by_value_FieldDescriptorProto.Label'(Value);
enum_symbol_by_value('FileOptions.OptimizeMode',
		     Value) ->
    'enum_symbol_by_value_FileOptions.OptimizeMode'(Value);
enum_symbol_by_value('FieldOptions.CType', Value) ->
    'enum_symbol_by_value_FieldOptions.CType'(Value);
enum_symbol_by_value('FieldOptions.JSType', Value) ->
    'enum_symbol_by_value_FieldOptions.JSType'(Value).


enum_value_by_symbol('FieldDescriptorProto.Type',
		     Sym) ->
    'enum_value_by_symbol_FieldDescriptorProto.Type'(Sym);
enum_value_by_symbol('FieldDescriptorProto.Label',
		     Sym) ->
    'enum_value_by_symbol_FieldDescriptorProto.Label'(Sym);
enum_value_by_symbol('FileOptions.OptimizeMode', Sym) ->
    'enum_value_by_symbol_FileOptions.OptimizeMode'(Sym);
enum_value_by_symbol('FieldOptions.CType', Sym) ->
    'enum_value_by_symbol_FieldOptions.CType'(Sym);
enum_value_by_symbol('FieldOptions.JSType', Sym) ->
    'enum_value_by_symbol_FieldOptions.JSType'(Sym).


'enum_symbol_by_value_FieldDescriptorProto.Type'(1) ->
    'TYPE_DOUBLE';
'enum_symbol_by_value_FieldDescriptorProto.Type'(2) ->
    'TYPE_FLOAT';
'enum_symbol_by_value_FieldDescriptorProto.Type'(3) ->
    'TYPE_INT64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(4) ->
    'TYPE_UINT64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(5) ->
    'TYPE_INT32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(6) ->
    'TYPE_FIXED64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(7) ->
    'TYPE_FIXED32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(8) ->
    'TYPE_BOOL';
'enum_symbol_by_value_FieldDescriptorProto.Type'(9) ->
    'TYPE_STRING';
'enum_symbol_by_value_FieldDescriptorProto.Type'(10) ->
    'TYPE_GROUP';
'enum_symbol_by_value_FieldDescriptorProto.Type'(11) ->
    'TYPE_MESSAGE';
'enum_symbol_by_value_FieldDescriptorProto.Type'(12) ->
    'TYPE_BYTES';
'enum_symbol_by_value_FieldDescriptorProto.Type'(13) ->
    'TYPE_UINT32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(14) ->
    'TYPE_ENUM';
'enum_symbol_by_value_FieldDescriptorProto.Type'(15) ->
    'TYPE_SFIXED32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(16) ->
    'TYPE_SFIXED64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(17) ->
    'TYPE_SINT32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(18) ->
    'TYPE_SINT64'.


'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_DOUBLE') ->
    1;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_FLOAT') ->
    2;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_INT64') ->
    3;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_UINT64') ->
    4;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_INT32') ->
    5;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_FIXED64') ->
    6;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_FIXED32') ->
    7;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_BOOL') ->
    8;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_STRING') ->
    9;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_GROUP') ->
    10;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_MESSAGE') ->
    11;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_BYTES') ->
    12;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_UINT32') ->
    13;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_ENUM') ->
    14;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SFIXED32') ->
    15;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SFIXED64') ->
    16;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SINT32') ->
    17;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SINT64') ->
    18.

'enum_symbol_by_value_FieldDescriptorProto.Label'(1) ->
    'LABEL_OPTIONAL';
'enum_symbol_by_value_FieldDescriptorProto.Label'(2) ->
    'LABEL_REQUIRED';
'enum_symbol_by_value_FieldDescriptorProto.Label'(3) ->
    'LABEL_REPEATED'.


'enum_value_by_symbol_FieldDescriptorProto.Label'('LABEL_OPTIONAL') ->
    1;
'enum_value_by_symbol_FieldDescriptorProto.Label'('LABEL_REQUIRED') ->
    2;
'enum_value_by_symbol_FieldDescriptorProto.Label'('LABEL_REPEATED') ->
    3.

'enum_symbol_by_value_FileOptions.OptimizeMode'(1) ->
    'SPEED';
'enum_symbol_by_value_FileOptions.OptimizeMode'(2) ->
    'CODE_SIZE';
'enum_symbol_by_value_FileOptions.OptimizeMode'(3) ->
    'LITE_RUNTIME'.


'enum_value_by_symbol_FileOptions.OptimizeMode'('SPEED') ->
    1;
'enum_value_by_symbol_FileOptions.OptimizeMode'('CODE_SIZE') ->
    2;
'enum_value_by_symbol_FileOptions.OptimizeMode'('LITE_RUNTIME') ->
    3.

'enum_symbol_by_value_FieldOptions.CType'(0) ->
    'STRING';
'enum_symbol_by_value_FieldOptions.CType'(1) -> 'CORD';
'enum_symbol_by_value_FieldOptions.CType'(2) ->
    'STRING_PIECE'.


'enum_value_by_symbol_FieldOptions.CType'('STRING') ->
    0;
'enum_value_by_symbol_FieldOptions.CType'('CORD') -> 1;
'enum_value_by_symbol_FieldOptions.CType'('STRING_PIECE') ->
    2.

'enum_symbol_by_value_FieldOptions.JSType'(0) ->
    'JS_NORMAL';
'enum_symbol_by_value_FieldOptions.JSType'(1) ->
    'JS_STRING';
'enum_symbol_by_value_FieldOptions.JSType'(2) ->
    'JS_NUMBER'.


'enum_value_by_symbol_FieldOptions.JSType'('JS_NORMAL') ->
    0;
'enum_value_by_symbol_FieldOptions.JSType'('JS_STRING') ->
    1;
'enum_value_by_symbol_FieldOptions.JSType'('JS_NUMBER') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'google.protobuf'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
